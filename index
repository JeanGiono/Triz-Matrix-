<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>創新問題解決工具 (整合Gemini API)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .tab-button.active {
            border-color: #3b82f6;
            color: #3b82f6;
            font-weight: 600;
        }
        .step-section {
            display: none;
        }
        .step-section.active {
            display: block;
        }
        .dynamic-list-item {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            border: 1px solid #e5e7eb;
            border-radius: 0.375rem;
        }
        .dynamic-list-item input[type="text"] {
            flex-grow: 1;
            margin-right: 0.5rem;
        }
        .remove-btn {
            background-color: #ef4444;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            cursor: pointer;
        }
        .remove-btn:hover {
            background-color: #dc2626;
        }
        .ideas-landscape-plot {
            width: 100%;
            max-width: 500px;
            height: 400px;
            border: 1px solid #ccc;
            position: relative;
            margin: 20px auto;
            background-color: #f9fafb;
        }
        .plot-point {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: #3b82f6;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            font-size: 10px;
            text-align: center;
            line-height: 10px;
            color: white;
            cursor: pointer;
        }
        .plot-point .tooltip {
            visibility: hidden;
            width: 120px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px 0;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -60px;
            opacity: 0;
            transition: opacity 0.3s;
        }
        .plot-point:hover .tooltip {
            visibility: visible;
            opacity: 1;
        }
        .plot-axis {
            position: absolute;
            background-color: #9ca3af;
        }
        .x-axis {
            bottom: 50%;
            left: 0;
            width: 100%;
            height: 1px;
        }
        .y-axis {
            top: 0;
            left: 50%;
            width: 1px;
            height: 100%;
        }
        .axis-label {
            position: absolute;
            font-size: 12px;
            color: #6b7280;
        }
        .x-axis-label {
            bottom: calc(50% - 20px);
            left: 50%;
            transform: translateX(-50%);
        }
        .y-axis-label {
            top: 50%;
            left: calc(50% - 30px);
            transform: translateY(-50%) rotate(-90deg);
        }
         .quadrant-label {
            position: absolute;
            font-size: 11px;
            color: #a0aec0;
            padding: 5px;
        }
        .lean-canvas-grid {
            display: grid;
            grid-template-columns: repeat(1, 1fr); 
            gap: 1rem;
        }
        @media (min-width: 768px) { 
            .lean-canvas-grid {
                grid-template-columns: repeat(3, 1fr); 
            }
            .lc-problem { grid-column: span 1 / span 1; }
            .lc-solution { grid-column: span 1 / span 1; }
            .lc-key-metrics { grid-column: span 1 / span 1; }
            .lc-uvp { grid-column: span 3 / span 3;  }
            .lc-unfair-advantage { grid-column: span 1 / span 1; }
            .lc-channels { grid-column: span 1 / span 1; }
            .lc-customer-segments { grid-column: span 1 / span 1; }
            .lc-cost-structure { grid-column: span 1 / span 1; grid-row: 4 / span 1; }
            .lc-revenue-streams { grid-column: span 2 / span 2; grid-row: 4 / span 1; }
        }
         @media (min-width: 1024px) { 
            .lean-canvas-grid {
                grid-template-columns: repeat(5, 1fr);
                grid-template-rows: auto auto auto; 
            }
            .lc-problem { grid-column: 1 / span 1; grid-row: 1 / span 1; }
            .lc-solution { grid-column: 2 / span 1; grid-row: 1 / span 1; }
            .lc-key-metrics { grid-column: 4 / span 1; grid-row: 1 / span 1; }
            .lc-uvp { grid-column: 3 / span 1; grid-row: 1 / span 2;  }
            .lc-unfair-advantage { grid-column: 1 / span 1; grid-row: 2 / span 1; }
            .lc-channels { grid-column: 2 / span 1; grid-row: 2 / span 1; }
            .lc-customer-segments { grid-column: 5 / span 1; grid-row: 1 / span 2;  }
            .lc-cost-structure { grid-column: 1 / span 2; grid-row: 3 / span 1; } 
            .lc-revenue-streams { grid-column: 3 / span 3; grid-row: 3 / span 1; } 
        }

        .lean-canvas-cell {
            border: 1px solid #d1d5db;
            padding: 0.75rem;
            border-radius: 0.375rem;
            background-color: #f9fafb;
            min-height: 150px; 
            display: flex;
            flex-direction: column;
        }
        .lean-canvas-cell label {
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }
        .lean-canvas-cell textarea {
            width: 100%;
            flex-grow: 1;
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 0.25rem;
            font-size: 0.875rem;
            resize: vertical; 
        }
        /* Modal Styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 100; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto; /* 10% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Could be more or less, depending on screen size */
            max-width: 600px;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .modal-close-btn {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .modal-close-btn:hover,
        .modal-close-btn:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        .ai-suggestion-container {
            margin-top: 0.5rem;
            padding: 0.5rem;
            background-color: #eef2ff; /* Light indigo background */
            border: 1px solid #c7d2fe; /* Indigo border */
            border-radius: 0.375rem;
            font-size: 0.875rem;
            color: #4338ca; /* Indigo text */
        }
        .loading-spinner {
            border: 2px solid #f3f3f3; /* Light grey */
            border-top: 2px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 16px;
            height: 16px;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-left: 8px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-100 p-4 md:p-8">
    <div class="container mx-auto bg-white p-6 rounded-lg shadow-xl">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold text-blue-600">創新問題解決工具</h1>
            <button id="manageProgressBtn" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm">管理進度</button>
        </div>

        <div class="mb-6 border-b border-gray-200">
            <nav class="flex flex-wrap space-x-1 sm:space-x-4" aria-label="Tabs">
                <button data-tab="step1" class="tab-button py-3 px-2 sm:px-4 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 text-xs sm:text-base">1. 問題與RCA</button>
                <button data-tab="step2" class="tab-button py-3 px-2 sm:px-4 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 text-xs sm:text-base">2. 衝突分析</button>
                <button data-tab="step3" class="tab-button py-3 px-2 sm:px-4 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 text-xs sm:text-base">3. TRIZ方案生成</button>
                <button data-tab="step4" class="tab-button py-3 px-2 sm:px-4 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 text-xs sm:text-base">4. 方案評估選擇</button>
                <button data-tab="step5" class="tab-button py-3 px-2 sm:px-4 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 text-xs sm:text-base">5. 精實畫布</button>
                <button data-tab="step6" class="tab-button py-3 px-2 sm:px-4 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 text-xs sm:text-base">6. 最終報告</button>
            </nav>
        </div>

        <section id="step1" class="step-section active">
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">步驟 1: 界定關鍵問題與根本原因分析 (RCA)</h2>
            <div class="mb-6">
                <label for="keyProblem" class="block text-sm font-medium text-gray-700 mb-1">關鍵問題描述:</label>
                <textarea id="keyProblem" rows="3" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="請明確界定一個您想解決的關鍵問題..."></textarea>
                 <button id="aiSuggestRcaBtn" class="mt-2 bg-sky-500 hover:bg-sky-600 text-white font-semibold py-2 px-3 rounded-md shadow-sm text-sm">✨ AI 協助分析潛在根本原因</button>
                 <div id="aiRcaSuggestions" class="ai-suggestion-container" style="display: none;"></div>
            </div>
            <div class="mb-4">
                <h3 class="text-lg font-medium text-gray-700 mb-2">根本原因分析 (RCA):</h3>
                <p class="text-sm text-gray-500 mb-2">不斷追問「是什麼原因造成這個問題？」以及「這個原因又是被什麼造成的？」</p>
                <div id="rcaCausesContainer">
                    </div>
                <button id="addRcaCauseBtn" class="mt-2 bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm">新增原因</button>
            </div>
        </section>

        <section id="step2" class="step-section">
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">步驟 2: 衝突分析</h2>
            <p class="text-sm text-gray-500 mb-3">根據根本原因，找出導致問題的「衝突點」。衝突通常體現為：當試圖改善一個方面（帶來好處）時，會導致另一個方面惡化（帶來壞處）。</p>
            <div id="conflictAnalysisContainer">
                </div>
            <button id="addConflictBtn" class="mt-2 bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm">新增衝突點</button>
        </section>

        <section id="step3" class="step-section">
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">步驟 3: 利用 TRIZ 方法生成解決方案</h2>
            <p class="text-sm text-gray-500 mb-3">根據識別出的衝突，運用 TRIZ 的工具來生成潛在的解決方案。</p>
            <div class="mb-4 p-4 border border-blue-200 bg-blue-50 rounded-md">
                <h4 class="font-semibold text-blue-700">提示：對應工程參數與查找發明原則</h4>
                <p class="text-sm text-blue-600">將衝突中的「好處」和「壞處」對應到相應的工程參數。然後，系統將根據這些參數（簡化版對應）建議一些發明原則，協助您發想解決方案。</p>
            </div>
            <div id="trizSolutionsContainer">
                </div>
            <button id="addTrizSolutionSetBtn" class="mt-2 bg-purple-500 hover:bg-purple-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm">為衝突點生成方案</button>
        </section>

        <section id="step4" class="step-section">
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">步驟 4: 評估與選擇解決方案</h2>
            <div class="mb-8 p-4 border rounded-md shadow-sm">
                <h3 class="text-xl font-semibold text-gray-700 mb-3">4.1 初步篩選 (ABC Filtering)</h3>
                <p class="text-sm text-gray-500 mb-2">對所有生成的方案進行初步分級 (A: 值得考慮, B: 有懷疑/保守, C: 無考慮價值)。</p>
                <div id="abcFilteringContainer"></div>
            </div>
            <div class="mb-8 p-4 border rounded-md shadow-sm">
                <h3 class="text-xl font-semibold text-gray-700 mb-3">4.2 多準則決策評估 (MCDM)</h3>
                <p class="text-sm text-gray-500 mb-2">對 A 級方案進行更詳細的評估。請先設定評估準則及其權重。</p>
                <div class="mb-4">
                    <h4 class="text-lg font-medium text-gray-700 mb-2">設定評估準則:</h4>
                    <div id="mcdmCriteriaContainer"></div>
                    <button id="addMcdmCriterionBtn" class="mt-2 bg-indigo-500 hover:bg-indigo-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm text-sm">新增準則</button>
                </div>
                <div id="mcdmEvaluationContainer">
                    <h4 class="text-lg font-medium text-gray-700 mb-2">A級方案評分:</h4>
                </div>
            </div>
            <div class="mb-8 p-4 border rounded-md shadow-sm">
                <h3 class="text-xl font-semibold text-gray-700 mb-3">4.3 創意景觀圖 (Ideas Landscape)</h3>
                <p class="text-sm text-gray-500 mb-2">將方案的評估結果以圖形方式呈現。橫軸：導入所需時間，縱軸：MCDM總分。</p>
                <div id="ideasLandscapeInputContainer" class="mb-4"></div>
                <div id="ideasLandscapePlotContainer" class="ideas-landscape-plot">
                    <div class="plot-axis x-axis"></div> <div class="plot-axis y-axis"></div>
                    <div class="axis-label x-axis-label">導入所需時間 (短 → 長)</div>
                    <div class="axis-label y-axis-label">MCDM 總分 (低 → 高)</div>
                    <div class="quadrant-label" style="top: 10px; left: 10px;">II. 優先</div> <div class="quadrant-label" style="top: 10px; right: 10px;">I. 長期</div>
                    <div class="quadrant-label" style="bottom: 10px; left: 10px;">III. 捨棄</div> <div class="quadrant-label" style="bottom: 10px; right: 10px;">IV. 避免</div>
                </div>
                 <button id="generateIdeasLandscapeBtn" class="mt-4 bg-teal-500 hover:bg-teal-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm">產生/更新景觀圖</button>
            </div>
            <div class="p-4 border rounded-md shadow-sm">
                <h3 class="text-xl font-semibold text-gray-700 mb-3">4.4 TRIZ 理想性評估 (可選)</h3>
                <p class="text-sm text-gray-500 mb-2">對最終選出的 Top Ideas 進行更嚴格的 TRIZ 理想性評估。</p>
                <div id="trizIdealnessContainer"></div>
                 <button id="startTrizIdealnessBtn" class="mt-2 bg-pink-500 hover:bg-pink-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm text-sm">開始理想性評估</button>
            </div>
        </section>

        <section id="step5" class="step-section">
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">步驟 5: 精實畫布 / 商業模式 (Lean Canvas)</h2>
            <p class="text-sm text-gray-500 mb-1">針對您選定的解決方案，規劃其商業模式。 </p>
            <p class="text-xs text-blue-500 mb-3">提示：點擊下方按鈕可快速帶入先前步驟的相關資訊。</p>
            <div class="mb-3">
                <button id="prefillLeanCanvasProblemBtn" class="text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 py-1 px-2 rounded-md mr-2">從步驟1帶入「問題」</button>
                <button id="prefillLeanCanvasSolutionBtn" class="text-xs bg-green-100 hover:bg-green-200 text-green-700 py-1 px-2 rounded-md">從最佳A級方案帶入「解決方案」與「獨特價值主張」建議</button>
            </div>
            
            <div id="leanCanvasGridContainer" class="lean-canvas-grid">
                </div>
        </section>

        <section id="step6" class="step-section">
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">步驟 6: 最終方案與報告呈現</h2>
            <p class="text-sm text-gray-500 mb-3">綜合所有分析與評估，選定最終方案並檢視完整報告。</p>
             <button id="aiGenerateReportSummaryBtn" class="mb-3 bg-sky-500 hover:bg-sky-600 text-white font-semibold py-2 px-3 rounded-md shadow-sm text-sm">✨ AI 產生報告摘要</button>
            <div id="aiReportSummaryContainer" class="ai-suggestion-container mb-4" style="display:none;"></div>
            <div id="finalReportContainer" class="space-y-6">
                </div>
            <button id="generateReportBtn" class="mt-4 bg-gray-700 hover:bg-gray-800 text-white font-semibold py-2 px-4 rounded-md shadow-sm">產生最終報告</button>
        </section>

        <div class="mt-8 pt-6 border-t border-gray-200 flex justify-between">
            <button id="prevStepBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-6 rounded-md shadow-sm">上一步</button>
            <button id="nextStepBtn" class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-6 rounded-md shadow-sm">下一步</button>
        </div>
    </div>

    <div id="progressModal" class="modal">
        <div class="modal-content">
            <span class="modal-close-btn" id="closeProgressModalBtn">&times;</span>
            <h2 class="text-xl font-semibold text-gray-700 mb-4">管理進度</h2>
            
            <div class="mb-6 p-4 border rounded-md">
                <h3 class="text-lg font-medium text-gray-700 mb-2">儲存目前進度</h3>
                <label for="progressNameInput" class="block text-sm font-medium text-gray-600 mb-1">進度名稱 (可選):</label>
                <input type="text" id="progressNameInput" class="w-full p-2 border border-gray-300 rounded-md mb-2" placeholder="例如：我的第一個專案">
                <button id="saveNewProgressBtn" class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm text-sm">儲存為新進度</button>
            </div>

            <div class="p-4 border rounded-md">
                <h3 class="text-lg font-medium text-gray-700 mb-2">已儲存的進度</h3>
                <div id="savedProgressList" class="space-y-2 max-h-60 overflow-y-auto">
                    <p class="text-sm text-gray-500">尚未儲存任何進度。</p>
                </div>
            </div>
             <div id="globalNotification" class="mt-4 p-3 text-sm rounded-md" style="display: none;"></div>
        </div>
    </div>


    <script>
        // --- Global State and Data ---
        let appState = {
            keyProblem: "",
            rcaCauses: [], 
            conflicts: [], 
            trizSolutions: [], 
            abcCategories: {}, 
            mcdmCriteria: [], 
            mcdmScores: {}, 
            solutionImplementationTimes: {}, 
            trizIdealnessScores: {}, 
            leanCanvas: { 
                problem: "", solution: "", keyMetrics: "", uniqueValueProposition: "",
                unfairAdvantage: "", channels: "", customerSegments: "",
                costStructure: "", revenueStreams: "",
                selectedSolutionTextForCanvas: "" 
            },
            currentStep: 1
        };
        
        const LOCAL_STORAGE_KEY = 'innovationToolSaves_v2_gemini'; 

        // --- Gemini API Helper ---
        const API_KEY = ""; // Provided by Canvas environment or leave empty
        const API_URL_GEMINI = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;

        async function callGeminiAPI(promptText, targetElement, buttonElement, loadingText = "AI 思考中...") {
            if (!promptText || promptText.trim() === "") {
                showNotification("請先提供相關內容以供 AI 分析。", "error", targetElement ? targetElement.id + "_notification" : "globalNotification");
                return null;
            }

            const originalButtonText = buttonElement.innerHTML;
            buttonElement.innerHTML = `${loadingText} <div class="loading-spinner"></div>`;
            buttonElement.disabled = true;

            const payload = {
                contents: [{ role: "user", parts: [{ text: promptText }] }]
            };

            try {
                const response = await fetch(API_URL_GEMINI, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    console.error("Gemini API Error:", errorData);
                    throw new Error(`API 請求失敗，狀態碼：${response.status}. ${errorData?.error?.message || ''}`);
                }

                const result = await response.json();
                
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    return result.candidates[0].content.parts[0].text;
                } else {
                    console.error("Gemini API 意外的回應結構:", result);
                    throw new Error("AI 未能產生有效的回應內容。");
                }
            } catch (error) {
                console.error("呼叫 Gemini API 時發生錯誤:", error);
                showNotification(`AI 服務錯誤: ${error.message}`, "error", targetElement ? targetElement.id + "_notification" : "globalNotification");
                return null;
            } finally {
                buttonElement.innerHTML = originalButtonText;
                buttonElement.disabled = false;
            }
        }


        // --- TRIZ Data (Simplified) ---
        const engineeringParameters = [
            { id: "1", name: "1. 移動物體的重量" }, { id: "2", name: "2. 靜止物體的重量" },
            { id: "3", name: "3. 移動物體的長度" }, { id: "4", name: "4. 靜止物體的長度" },
            { id: "5", name: "5. 移動物體的面積" }, { id: "6", name: "6. 靜止物體的面積" },
            { id: "7", name: "7. 移動物體的體積" }, { id: "8", name: "8. 靜止物體的體積" },
            { id: "9", name: "9. 速度" }, { id: "10", name: "10. 力" },
            { id: "11", name: "11. 應力或壓力" }, { id: "12", name: "12. 形狀" },
            { id: "13", name: "13. 物體組成的穩定性" }, { id: "14", name: "14. 強度" },
            { id: "15", name: "15. 移動物體的作用持續時間" }, { id: "16", name: "16. 靜止物體的作用持續時間" },
            { id: "17", name: "17. 溫度" }, { id: "18", name: "18. 照明強度" },
            { id: "19", name: "19. 移動物體的能量消耗" }, { id: "20", name: "20. 靜止物體的能量消耗" },
            { id: "21", name: "21. 功率" }, { id: "22", name: "22. 能量損失" },
            { id: "23", name: "23. 物質損失" }, { id: "24", name: "24. 資訊損失" },
            { id: "25", name: "25. 時間損失 (系統時間)" }, { id: "26", name: "26. 物質數量" },
            { id: "27", name: "27. 可靠性 (系統有效性)" }, { id: "28", name: "28. 量測準確性" },
            { id: "29", name: "29. 製造精密度" }, { id: "30", name: "30. 物體受外部有害因素影響" },
            { id: "31", name: "31. 物體產生的有害因素" }, { id: "32", name: "32. 製造容易度" },
            { id: "33", name: "33. 操作容易度" }, { id: "34", name: "34. 維修容易度" },
            { id: "35", name: "35. 適應性或通用性" }, { id: "36", name: "36. 裝置複雜性" },
            { id: "37", name: "37. 偵測與量測困難度" }, { id: "38", name: "38. 自動化程度" },
            { id: "39", name: "39. 生產力／效能" }
        ];
        const inventivePrinciples = [
            { id: "1", name: "1. 分割 (Segmentation)"}, { id: "2", name: "2. 取出 (Taking out / Extraction)"},
            { id: "3", name: "3. 局部性質 (Local quality)"}, { id: "4", name: "4. 非對稱 (Asymmetry)"},
            { id: "5", name: "5. 合併 (Merging / Consolidation)"}, { id: "6", name: "6. 泛用性 (Universality)"},
            { id: "7", name: "7. 套疊 (Nested doll / Matryoshka)"}, { id: "8", name: "8. 反重力 (Anti-weight / Counterweight)"},
            { id: "9", name: "9. 預先反向作用 (Preliminary anti-action / Prior counteraction)"}, { id: "10", name: "10. 預先作用 (Preliminary action / Prior action)"},
            { id: "11", name: "11. 預先保護 (Beforehand cushioning / Cushion in advance)"}, { id: "12", name: "12. 等勢能 (Equipotentiality)"},
            { id: "13", name: "13. 反向 (The other way round / Inversion)"}, { id: "14", name: "14. 曲面化 (Spheroidality / Curvature)"},
            { id: "15", name: "15. 動態化 (Dynamics / Dynamization)"}, { id: "16", name: "16. 不足或超額作用 (Partial or excessive actions)"},
            { id: "17", name: "17. 維度轉換 (Another dimension / Transition into a new dimension)"}, { id: "18", name: "18. 機械振動 (Mechanical vibration)"},
            { id: "19", name: "19. 週期性作用 (Periodic action)"}, { id: "20", name: "20. 有用作用的連續性 (Continuity of useful action)"},
            { id: "21", name: "21. 高速執行 (Skipping / Rushing through)"}, { id: "22", name: "22. 化害為利 (Blessing in disguise / Convert harm into benefit)"},
            { id: "23", name: "23. 回饋 (Feedback)"}, { id: "24", name: "24. 中介物 (Intermediary / Mediator)"},
            { id: "25", name: "25. 自助服務 (Self-service)"}, { id: "26", name: "26. 複製 (Copying)"},
            { id: "27", name: "27. 廉價替代品 (Cheap short-living objects)"}, { id: "28", name: "28. 機械系統替代 (Mechanics substitution / Replace mechanical system)"},
            { id: "29", name: "29. 氣動或液壓系統 (Pneumatics and hydraulics)"}, { id: "30", name: "30. 可撓性殼膜 (Flexible shells and thin films)"},
            { id: "31", name: "31. 多孔材料 (Porous materials)"}, { id: "32", name: "32. 顏色改變 (Color changes)"},
            { id: "33", name: "33. 同質性 (Homogeneity)"}, { id: "34", name: "34. 拋棄與再生 (Discarding and recovering / Rejection and regeneration)"},
            { id: "35", name: "35. 參數改變 (Parameter changes)"}, { id: "36", name: "36. 相態轉換 (Phase transitions)"},
            { id: "37", name: "37. 熱膨脹 (Thermal expansion)"}, { id: "38", name: "38. 強氧化劑 (Strong oxidants / Accelerated oxidation)"},
            { id: "39", name: "39. 惰性環境 (Inert atmosphere)"}, { id: "40", name: "40. 複合材料 (Composite materials)"}
        ];
        const simplifiedContradictionMap = { "25_27": ["9", "5", "40", "4"], "default": ["1", "2", "5", "10", "13", "35"] };
        function getSuggestedPrinciples(improvingParamId, worseningParamId) {
            const key = `${improvingParamId}_${worseningParamId}`;
            const principleIds = simplifiedContradictionMap[key] || simplifiedContradictionMap["default"];
            return principleIds.map(id => inventivePrinciples.find(p => p.id === id)).filter(p => p);
        }

        // --- Utility Functions ---
        function generateId() { return Date.now().toString(36) + Math.random().toString(36).substr(2); }
        
        function updateUI() {
            document.querySelectorAll('.step-section').forEach(section => section.classList.remove('active'));
            const currentStepSection = document.getElementById(`step${appState.currentStep}`);
            if (currentStepSection) currentStepSection.classList.add('active');
            
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
                if (button.dataset.tab === `step${appState.currentStep}`) button.classList.add('active');
            });
            
            const prevStepBtn = document.getElementById('prevStepBtn');
            if (prevStepBtn) prevStepBtn.disabled = appState.currentStep === 1;
            
            const nextStepBtn = document.getElementById('nextStepBtn');
            if (nextStepBtn) nextStepBtn.textContent = appState.currentStep === 6 ? '完成並檢視報告' : '下一步';
        }

        document.querySelectorAll('.tab-button').forEach(button => {
            button.addEventListener('click', () => {
                const targetStep = parseInt(button.dataset.tab.replace('step', ''));
                saveCurrentStepDataToState(); 
                appState.currentStep = targetStep;
                populateCurrentStepUIFromState(); 
                updateUI();
            });
        });

        function populateAllUIFromState() {
            document.getElementById('keyProblem').value = appState.keyProblem;
            renderRcaCauses();
            renderConflicts();
            renderTrizSolutions();
            renderAbcFiltering();
            renderMcdmCriteria();
            renderMcdmEvaluation();
            renderIdeasLandscapeInputs();
            renderIdeasLandscapePlot(); 
            renderLeanCanvas();
            if (appState.currentStep === 6) renderFinalReport(); 

            updateUI();
            populateCurrentStepUIFromState();
        }
        
        function populateCurrentStepUIFromState() {
            if (appState.currentStep === 1) {
                document.getElementById('keyProblem').value = appState.keyProblem;
                renderRcaCauses();
            }
            if (appState.currentStep === 2) renderConflicts();
            if (appState.currentStep === 3) renderTrizSolutions();
            if (appState.currentStep === 4) { 
                renderAbcFiltering(); 
                renderMcdmCriteria(); 
                renderMcdmEvaluation(); 
                renderIdeasLandscapeInputs(); 
                renderIdeasLandscapePlot(); 
                renderTrizIdealnessAssessment(); 
            }
            if (appState.currentStep === 5) renderLeanCanvas();
            if (appState.currentStep === 6) renderFinalReport(); 
        }

        function saveCurrentStepDataToState() {
            if (document.getElementById('step1').classList.contains('active')) {
                appState.keyProblem = document.getElementById('keyProblem').value;
            }
            if (document.getElementById('step5').classList.contains('active')) {
                 saveLeanCanvasData(); 
            }
        }


        // --- Step 1: Problem Definition & RCA ---
        const rcaCausesContainer = document.getElementById('rcaCausesContainer');
        const aiSuggestRcaBtn = document.getElementById('aiSuggestRcaBtn');
        const aiRcaSuggestionsContainer = document.getElementById('aiRcaSuggestions');

        document.getElementById('addRcaCauseBtn').addEventListener('click', () => addRcaCause());
        
        aiSuggestRcaBtn.addEventListener('click', async () => {
            const keyProblemText = appState.keyProblem;
            if (!keyProblemText.trim()) {
                showNotification("請先在上方描述關鍵問題。", "error", "aiRcaSuggestions");
                return;
            }
            const prompt = `針對以下關鍵問題：「${keyProblemText}」，請提出3至5個可能的根本原因（Root Causes）。每個原因請簡潔表述。`;
            const suggestions = await callGeminiAPI(prompt, aiRcaSuggestionsContainer, aiSuggestRcaBtn, "AI 分析中...");
            if (suggestions) {
                aiRcaSuggestionsContainer.innerHTML = `<p class="font-semibold mb-1">AI 建議的潛在根本原因：</p><div class="whitespace-pre-wrap p-2 bg-indigo-50 rounded">${suggestions}</div><p class="text-xs mt-1 text-gray-500">您可以參考以上建議，手動將其加入下方的根本原因分析列表。</p>`;
                aiRcaSuggestionsContainer.style.display = 'block';
            } else {
                aiRcaSuggestionsContainer.innerHTML = `<p class="text-red-600">無法獲取 AI 建議。</p>`;
                aiRcaSuggestionsContainer.style.display = 'block';
            }
        });

        function addRcaCause(parentId = null, level = 0, initialText = "") {
            const causeId = generateId(); appState.rcaCauses.push({ id: causeId, text: initialText, parentId: parentId, level: level }); renderRcaCauses();
        }
        function renderRcaCauses() {
            rcaCausesContainer.innerHTML = '';
            const buildCauseTree = (parentId = null, level = 0) => {
                appState.rcaCauses.filter(cause => cause.parentId === parentId).forEach(cause => {
                    const causeDiv = document.createElement('div'); causeDiv.className = 'dynamic-list-item mb-2'; causeDiv.style.marginLeft = `${level * 20}px`;
                    const input = document.createElement('input'); input.type = 'text'; input.value = cause.text; input.placeholder = level === 0 ? '主要原因...' : '造成此原因的子原因...'; input.className = 'p-1 border border-gray-300 rounded-md flex-grow'; input.onchange = (e) => cause.text = e.target.value;
                    const removeBtn = document.createElement('button'); removeBtn.textContent = '移除'; removeBtn.className = 'remove-btn text-xs'; removeBtn.onclick = () => { appState.rcaCauses = appState.rcaCauses.filter(c => c.id !== cause.id); removeChildrenCauses(cause.id); renderRcaCauses(); };
                    const addSubCauseBtn = document.createElement('button'); addSubCauseBtn.textContent = '新增子原因'; addSubCauseBtn.className = 'ml-2 bg-gray-200 hover:bg-gray-300 text-gray-700 text-xs py-1 px-2 rounded'; addSubCauseBtn.onclick = () => addRcaCause(cause.id, level + 1);
                    causeDiv.appendChild(input); causeDiv.appendChild(addSubCauseBtn); causeDiv.appendChild(removeBtn); rcaCausesContainer.appendChild(causeDiv); buildCauseTree(cause.id, level + 1);
                });
            }; buildCauseTree();
        }
        function removeChildrenCauses(parentId) {
            const children = appState.rcaCauses.filter(c => c.parentId === parentId);
            children.forEach(child => { removeChildrenCauses(child.id); appState.rcaCauses = appState.rcaCauses.filter(c => c.id !== child.id); });
        }

        // --- Step 2: Conflict Analysis ---
        const conflictAnalysisContainer = document.getElementById('conflictAnalysisContainer');
        document.getElementById('addConflictBtn').addEventListener('click', addConflict);
        function addConflict() { const conflictId = generateId(); appState.conflicts.push({ id: conflictId, rcaCauseText: "", benefit: "", drawback: "" }); renderConflicts(); }
        function renderConflicts() {
            conflictAnalysisContainer.innerHTML = '';
            appState.conflicts.forEach((conflict, index) => {
                const div = document.createElement('div'); div.className = 'p-4 border border-gray-200 rounded-md mb-4 shadow';
                div.innerHTML = `<h4 class="font-semibold text-md mb-2">衝突點 ${index + 1}</h4>
                    <div class="mb-2"><label class="block text-sm font-medium text-gray-600">相關根本原因 (可選):</label><input type="text" value="${conflict.rcaCauseText}" onchange="appState.conflicts[${index}].rcaCauseText = this.value" class="w-full p-1 border border-gray-300 rounded-md" placeholder="例如：文卷室工作制度不完善"></div>
                    <div class="mb-2"><label class="block text-sm font-medium text-gray-600">試圖改善的方面 (帶來的好處):</label><input type="text" value="${conflict.benefit}" onchange="appState.conflicts[${index}].benefit = this.value" class="w-full p-1 border border-gray-300 rounded-md" placeholder="例如：人員培養的時間較短"></div>
                    <div class="mb-2"><label class="block text-sm font-medium text-gray-600">導致惡化的方面 (帶來的壞處):</label><input type="text" value="${conflict.drawback}" onchange="appState.conflicts[${index}].drawback = this.value" class="w-full p-1 border border-gray-300 rounded-md" placeholder="例如：文卷室工作制度不完善"></div>
                    <button onclick="removeConflict('${conflict.id}')" class="remove-btn text-xs">移除此衝突</button>`;
                conflictAnalysisContainer.appendChild(div);
            });
        }
        function removeConflict(conflictId) { appState.conflicts = appState.conflicts.filter(c => c.id !== conflictId); appState.trizSolutions = appState.trizSolutions.filter(s => s.conflictId !== conflictId); renderConflicts(); }

        // --- Step 3: TRIZ Solution Generation ---
        const trizSolutionsContainer = document.getElementById('trizSolutionsContainer');
        document.getElementById('addTrizSolutionSetBtn').addEventListener('click', showConflictSelectorForTriz);
        function showConflictSelectorForTriz() {
            if (appState.conflicts.length === 0) { showNotification("請先在步驟2新增至少一個衝突點。", "error"); return; }
            const existingSelector = trizSolutionsContainer.querySelector('#trizConflictSelectorContainer');
            if (existingSelector) return; 

            const selectorDiv = document.createElement('div'); selectorDiv.id = 'trizConflictSelectorContainer'; selectorDiv.className = 'mb-4 p-3 border rounded bg-gray-50';
            selectorDiv.innerHTML = `<label class="block text-sm font-medium text-gray-700 mb-1">選擇一個衝突點來生成方案：</label>
                <select id="trizConflictSelector" class="w-full p-2 border border-gray-300 rounded-md"></select>
                <button id="confirmTrizConflictSelect" class="mt-2 bg-purple-500 hover:bg-purple-600 text-white py-1 px-3 rounded text-sm">確定並新增方案區塊</button>`;
            trizSolutionsContainer.insertBefore(selectorDiv, trizSolutionsContainer.firstChild);
            const selectConflictEl = document.getElementById('trizConflictSelector');
            appState.conflicts.forEach(conflict => { const option = document.createElement('option'); option.value = conflict.id; option.textContent = `衝突: "${conflict.benefit}" vs "${conflict.drawback}"`; selectConflictEl.appendChild(option); });
            document.getElementById('confirmTrizConflictSelect').onclick = () => { if (