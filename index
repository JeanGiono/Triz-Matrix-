<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>創新問題解決工具</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        /* 基本樣式 */
        body { font-family: 'Inter', sans-serif; }
        /* 圖表渲染區域 */
        #diagram-render-area {
            position: relative; overflow: auto; padding: 0; background-color: #fff;
            border-radius: 0.5rem; box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            min-height: 450px; width: 100%; user-select: none;
        }
        #scalable-content-wrapper {
            position: relative; transform-origin: top left; display: inline-block;
            padding: 20px; cursor: grab;
        }
        #scalable-content-wrapper:active { cursor: grabbing; }
        #svg-connector-layer {
            position: absolute; top: 20px; left: 20px; pointer-events: none; z-index: 0;
        }
        #rca-diagram-container {
            display: inline-block; text-align: center; position: relative; z-index: 1;
        }

        /* 節點樣式 */
        .rca-node-wrapper {
            display: inline-flex; flex-direction: column; align-items: center;
            margin: 0 1rem; vertical-align: top;
            transition: margin 0.3s ease-in-out, opacity 0.3s ease-in-out;
        }
        .rca-node {
            border: 2px solid #4b5563; padding: 0.6rem 1.1rem;
            margin-top: 30px; margin-bottom: 15px;
            box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);
            display: inline-flex; flex-direction: column; align-items: center;
            max-width: 350px; border-radius: 0.375rem; position: relative;
            z-index: 1; background-color: #ffffff; overflow-wrap: break-word;
            transition: opacity 0.3s ease-in-out, border-color 0.3s ease-in-out, background-color 0.3s ease-in-out;
        }
        .rca-node.dimmed { opacity: 0.3; }
        .rca-node-content {
            display: flex; flex-direction: column; gap: 0.4rem; width: 100%; align-items: center;
        }
        .rca-node-header {
            display: flex; align-items: center; justify-content: center;
            gap: 0.4rem; width: 100%; position: relative; margin-bottom: 0.25rem;
        }
        .rca-node-icon {
            font-weight: bold; font-size: 0.85em; padding: 0.2em 0.4em; border-radius: 50%;
            color: white; position: absolute; top: 0.4rem; right: 0.4rem;
            min-width: 22px; height: 22px; display: flex; align-items: center; justify-content: center;
            border: 2px solid white; box-shadow: 0 1px 2px rgba(0,0,0,0.2);
            z-index: 10; transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
        }
        .node-badge {
            font-size: 0.65em; font-weight: bold; color: #374151;
            background-color: #e5e7eb; padding: 0.15rem 0.35rem; border-radius: 0.25rem;
            align-self: center; margin-left: 0.25rem;
        }
        .abc-badge {
            position: absolute; top: 0.4rem; left: 0.4rem; font-size: 0.7em; font-weight: bold;
            padding: 0.15em 0.4em; border-radius: 0.25rem; color: white; border: 1px solid white;
            box-shadow: 0 1px 2px rgba(0,0,0,0.2); z-index: 10;
        }
        .abc-badge-A { background-color: #ef4444; }
        .abc-badge-B { background-color: #f97316; }
        .abc-badge-C { background-color: #f59e0b; }

        .rca-node-text {
            font-weight: 500; font-size: 0.9rem; text-align: center;
            overflow-wrap: break-word; line-height: 1.4; box-sizing: border-box;
        }
        .rca-node:not(.rca-node-positive-effect):not(.rca-node-negative-effect) .rca-node-text {
            width: 9em; padding-right: 2.5em; padding-left: 1.5em;
            display: inline-block; vertical-align: middle;
        }
        .rca-node-positive-effect .rca-node-text,
        .rca-node-negative-effect .rca-node-text {
            display: block; width: 100%; padding-right: 3em;
        }

        .selected-items-list {
            font-size: 0.75rem; color: #374151; margin-top: 0.5rem;
            padding-top: 0.375rem; border-top: 1px dashed #d1d5db; width: 100%; text-align: left;
        }
        .selected-items-list strong { display: block; margin-bottom: 0.25rem; color: #111827; }
        .selected-items-list ul { list-style-type: disc; margin-left: 1.25rem; padding-left: 0.25rem; }
        .selected-items-list li { margin-bottom: 0.25rem; }
        .selected-items-list .solution-text { color: #059669; margin-left: 0.3rem; font-style: italic;}
        .engineering-param-display { font-size: 0.7rem; color: #4b5563; margin-top: 0.25rem; }
        .ideality-score-display { font-size: 0.7rem; color: #1d4ed8; margin-top: 0.25rem; font-weight: bold;}

        /* 節點類型顏色 */
        .rca-node-initial-problem { background-color: #fee2e2; border-color: #ef4444; }
        .rca-node-initial-problem .rca-node-icon { background-color: #ef4444; }
        .rca-node-cause { background-color: #fef9c3; border-color: #f59e0b; }
        .rca-node-cause .rca-node-icon.contradictory { background-color: #8b5cf6; }
        .rca-node-positive-effect { background-color: #dbeafe; border-color: #3b82f6; border-radius: 0.375rem; padding: 0.6rem 1.1rem; } /* Changed to match cause node border-radius */
        .rca-node-positive-effect .rca-node-icon { background-color: #2563eb; }
        .rca-node-negative-effect { background-color: #ffedd5; border-color: #f97316; border-radius: 0.375rem; padding: 0.6rem 1.1rem; } /* Changed to match cause node border-radius */
        .rca-node-negative-effect .rca-node-icon { background-color: #f97316; }
        /* Added contradictory style for effect nodes */
        .rca-node-positive-effect .rca-node-icon.contradictory,
        .rca-node-negative-effect .rca-node-icon.contradictory { background-color: #8b5cf6; }


        .rca-children-container {
            display: flex; flex-direction: row; justify-content: center; align-items: flex-start;
            margin-top: 15px; position: relative; padding-top: 25px; width: max-content;
        }

        /* 動作按鈕 */
        .rca-node-actions {
            display: flex; flex-wrap: wrap; gap: 0.25rem; margin-top: 0.5rem;
            border-top: 1px solid #e5e7eb; padding-top: 0.5rem; width: 100%; justify-content: flex-start;
        }
        .action-button {
            background-color: #6b7280; color: white; padding: 0.375rem 0.75rem; border-radius: 0.25rem;
            font-size: 0.75rem; border: none; cursor: pointer; transition: background-color 0.2s;
        }
        .action-button:hover:not(:disabled) { background-color: #4b5563; }
        .action-button:disabled { background-color: #9ca3af; cursor: not-allowed; }
        .action-button.add-cause { background-color: #3b82f6; } .action-button.add-cause:hover:not(:disabled) { background-color: #2563eb; }
        .action-button.add-positive { background-color: #10b981; } .action-button.add-positive:hover:not(:disabled) { background-color: #059669; }
        .action-button.add-negative { background-color: #f97316; } .action-button.add-negative:hover:not(:disabled) { background-color: #ea580c; }
        .action-button.toggle-nc { background-color: #a855f7; } .action-button.toggle-nc:hover:not(:disabled) { background-color: #9333ea; }
        .action-button.set-abc { background-color: #14b8a6; } .action-button.set-abc:hover:not(:disabled) { background-color: #0d9488; }
        .action-button.set-triz { background-color: #ec4899; } .action-button.set-triz:hover:not(:disabled) { background-color: #db2777; }
        .action-button.set-and-sources { background-color: #6d28d9; } .action-button.set-and-sources:hover:not(:disabled) { background-color: #5b21b6; }
        .action-button.edit-node { background-color: #f59e0b; } .action-button.edit-node:hover:not(:disabled) { background-color: #d97706; }
        .action-button.set-parameters { background-color: #0ea5e9; } .action-button.set-parameters:hover:not(:disabled) { background-color: #0284c7; }
        .remove-button { background-color: #ef4444; } .remove-button:hover:not(:disabled) { background-color: #dc2626; }

        /* 輸入組件 */
        .input-group-container { margin-top: 0.5rem; width: calc(100% - 1rem); }
        .input-group {
            display: flex; flex-direction: column; gap: 0.5rem; padding: 0.5rem;
            border: 1px solid #e5e7eb; border-radius: 0.25rem; background-color: #f9fafb;
        }
        .input-field, .select-field {
            border: 1px solid #d1d5db; padding: 0.5rem; border-radius: 0.25rem;
            font-size: 0.875rem; width: 100%;
        }
        .save-button { background-color: #065f46; color: white; } .save-button:hover:not(:disabled) { background-color: #047857; }
        .save-edit-button { background-color: #065f46; color: white; } .save-edit-button:hover:not(:disabled) { background-color: #047857; }

        /* 資料表格 */
        .data-table-section { margin-top: 2rem; }
        .data-table { width: 100%; border-collapse: collapse; margin-top: 1rem; }
        .data-table th, .data-table td {
            border: 1px solid #d1d5db; padding: 0.5rem; font-size: 0.875rem;
            text-align: center; vertical-align: middle;
        }
        .data-table th { background-color: #e5e7eb; font-weight: 600; }
        .data-table td { background-color: white; }
        .data-table td:first-child, .data-table th:first-child { text-align: left; }
        .data-table .abc-select { padding: 0.25rem; font-size: 0.8rem; border-radius: 0.25rem; border: 1px solid #d1d5db; }
        .data-table .ideality-assess-button { font-size: 0.75rem; padding: 0.25rem 0.5rem; }

        /* 模態視窗 */
        .modal { z-index: 50; }
        .modal-content { position: relative; }
        .modal-close-button {
            position: absolute; top: 0.75rem; right: 0.75rem; background: none; border: none;
            font-size: 1.5rem; color: #6b7280; cursor: pointer; line-height: 1;
        }
        .modal-close-button:hover { color: #1f2937; }
        .modal-options-container { max-height: 60vh; overflow-y: auto; }
        .modal-options-container h4 {
            font-weight:600; margin-top: 0.75rem; margin-bottom: 0.25rem; color: #374151;
            border-bottom: 1px solid #e5e7eb; padding-bottom: 0.25rem;
        }
        .modal-options-container h4:first-child { margin-top: 0; }
        .principle-solution-input {
            width: calc(100% - 2rem); margin-left: 1.5rem; margin-top: 0.25rem; margin-bottom: 0.5rem;
            padding: 0.25rem 0.5rem; border: 1px solid #d1d5db; border-radius: 0.25rem; font-size: 0.8rem;
        }

        /* 縮放控制 */
        .zoom-controls { display: flex; gap: 0.5rem; align-items: center; }
        .zoom-controls span { font-size: 0.875rem; color: #4b5563; min-width: 50px; text-align: center; }

        /* 下拉選單 */
        .dropdown-content {
            display: none; position: absolute; background-color: #f9f9f9;
            min-width: 230px; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 10; border-radius: 0.375rem; padding: 0.5rem 0;
        }
        #sidebar-file-menu-container > #file-dropdown-content {
            left: 0; top: 100%; width: 100%; margin-left: 0; z-index: 60;
        }
        .dropdown-content button, .dropdown-content label {
            color: black; padding: 0.75rem 1rem; text-decoration: none; display: block;
            text-align: left; background: none; border: none; width: 100%; font-size: 0.875rem; cursor: pointer;
        }
        .dropdown-content button:hover, .dropdown-content label:hover { background-color: #e5e7eb; }
        .dropdown-content button:disabled { color: #9ca3af; cursor: not-allowed; background-color: #f9f9f9; }
        .dropdown-content button i, .dropdown-content label i { margin-right: 0.5rem; width: 1.25rem; text-align: center; }

        /* ABC 篩選按鈕 */
        .abc-filter-button {
            padding: 0.5rem 1rem; border-radius: 0.25rem; font-size: 0.875rem;
            color: white; transition: background-color 0.2s;
        }
        .abc-filter-button.active { box-shadow: inset 0 2px 4px rgba(0,0,0,0.2); }
        .solution-entry {
            border: 1px solid #e5e7eb; padding: 0.75rem; margin-bottom: 0.75rem;
            border-radius: 0.25rem; background-color: #f9fafb;
        }
        .solution-entry label { font-weight: 500; display: block; margin-bottom: 0.25rem;}

        /* 創意景觀圖 */
        #ideas-landscape-controls { margin-bottom: 1rem; }
        #ideas-landscape-chart-container { position: relative; min-height: 300px; }
        #ideas-landscape-no-data-message {
            position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);
            text-align: center; color: #6b7280; font-size: 0.875rem; padding: 1rem;
            background-color: #f9fafb; border-radius: 0.375rem; box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        }

        /* 理想性評估模態視窗 */
        .ideality-criterion { margin-bottom: 0.75rem; }
        .ideality-criterion label { display: block; font-size: 0.875rem; font-weight: 500; margin-bottom: 0.25rem; }
        .ideality-criterion input[type="number"], .ideality-criterion select { width: 100%; }
        .ideality-criterion input[type="range"] { width: calc(100% - 3.5rem); margin-right: 0.5rem; vertical-align: middle;}
        .ideality-criterion .range-value { font-size: 0.8rem; display: inline-block; width: 2.5rem; text-align: right;}

        /* 工具提示 */
        .tooltip-container { position: relative; display: inline-block; cursor: help; margin-left: 0.25rem; }
        .tooltip-text {
            visibility: hidden; background-color: #333; color: #fff; text-align: center;
            border-radius: 6px; padding: 8px 12px; position: absolute; z-index: 1;
            bottom: 125%; left: 50%; transform: translateX(-50%); opacity: 0;
            transition: opacity 0.3s; min-width: 250px; font-size: 0.75rem;
            line-height: 1.4; box-shadow: 0 2px 8px rgba(0,0,0,0.2); white-space: normal;
        }
        .tooltip-container:hover .tooltip-text { visibility: visible; opacity: 1; }
        .tooltip-text::after {
            content: ""; position: absolute; top: 100%; left: 50%; margin-left: -5px;
            border-width: 5px; border-style: solid; border-color: #333 transparent transparent transparent;
        }

        /* TRIZ 建議原理 */
        #suggested-principles-container {
            margin-top: 1rem; padding: 0.75rem; background-color: #f3f4f6;
            border-radius: 0.375rem; border: 1px solid #e5e7eb;
        }
        #suggested-principles-container h5 {
            font-size: 0.9rem; font-weight: 600; color: #374151; margin-bottom: 0.5rem;
        }
        #suggested-principles-list {
            list-style-type: decimal; margin-left: 1.25rem; font-size: 0.85rem; color: #4b5563;
        }
        #suggested-principles-list li { margin-bottom: 0.25rem; }

        /* 儀表板選單 */
        .menu-item {
            display: block; padding: 0.75rem 1rem; border-radius: 0.375rem; color: #d1d5db;
            transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
            font-weight: 500; cursor: pointer;
        }
        .menu-item:hover, .menu-item.active { background-color: #374151; color: #ffffff; }
        .menu-item.disabled { opacity: 0.5; cursor: not-allowed; background-color: transparent !important; color: #9ca3af !important; }
        .menu-item i.fa-fw { width: 1.25em; text-align: center; }

        /* 連接線標籤 */
        .connector-label-text { font-family: 'Inter', sans-serif; font-size: 10px; fill: #333; pointer-events: none; }
        .connector-label-bg { fill: rgba(255, 255, 255, 0.7); stroke: rgba(200, 200, 200, 0.5); stroke-width: 0.5px; pointer-events: none; }

        /* 自訂準則管理 */
        .criterion-entry {
            display: flex; align-items: center; padding: 0.5rem; background-color: #f0f4f8;
            border-radius: 0.25rem; margin-bottom: 0.5rem; font-size: 0.875rem; border: 1px solid #e2e8f0;
        }
        .criterion-entry span { flex-grow: 1; color: #334155; }
        .criterion-entry button { margin-left: 0.5rem; padding: 0.25rem 0.5rem; font-size: 0.75rem; }
        .criterion-form {
            padding: 1rem; border: 1px solid #cbd5e1; border-radius: 0.375rem;
            background-color: #f8fafc; margin-top: 1rem;
        }
        .criterion-form input[type="text"], .criterion-form input[type="number"], .criterion-form textarea {
            width: 100%; padding: 0.5rem; border: 1px solid #d1d5db; border-radius: 0.25rem;
            margin-top: 0.25rem; margin-bottom: 0.75rem; font-size: 0.875rem;
        }
        .criterion-form label { font-size: 0.8rem; font-weight: 500; color: #475569; }
    </style>
</head>
<body class="flex h-screen bg-gray-100">
    <aside id="dashboard-menu" class="w-64 bg-gray-800 text-white p-4 space-y-6 fixed top-0 left-0 h-full z-40 transform -translate-x-full md:translate-x-0 transition-transform duration-300 ease-in-out shadow-lg overflow-y-auto">
        <div class="text-center py-2 border-b border-gray-700">
            <a href="#" class="flex items-center justify-center">
                <i class="fas fa-rocket fa-2x mr-2 text-sky-400"></i> <h1 class="text-xl font-bold">創新工具</h1>
            </a>
        </div>
        <nav class="space-y-1">
            <div id="sidebar-file-menu-container" class="relative">
                <a href="#" id="sidebar-file-menu-trigger" class="menu-item group flex justify-between items-center">
                    <span><i class="fas fa-file-alt fa-fw mr-3"></i>檔案</span>
                    <i class="fas fa-caret-down"></i>
                </a>
                <div id="file-dropdown-content" class="dropdown-content">
                    <button id="save-diagram-button"><i class="fas fa-save"></i> 儲存進度 (瀏覽器)</button>
                    <button id="load-diagram-button"><i class="fas fa-folder-open"></i> 載入進度 (瀏覽器)</button>
                    <button id="save-to-file-button"><i class="fas fa-file-download"></i> 儲存至檔案</button>
                    <label for="file-input-for-load" id="load-from-file-label"><i class="fas fa-file-upload"></i> 從檔案載入</label>
                    <input type="file" id="file-input-for-load" accept=".json" style="display: none;">
                </div>
            </div>

            <a href="#" id="menu-item-dashboard-overview" class="menu-item group active"> <i class="fas fa-tachometer-alt fa-fw mr-3"></i>
                儀表板總覽
            </a>
            <a href="#rca-diagram-section" id="menu-item-rca-diagram" class="menu-item group">
                <i class="fas fa-project-diagram fa-fw mr-3"></i>
                RCA+ 分析圖
            </a>
             <hr class="border-gray-700 my-2">
            <span class="px-1 pt-2 pb-1 text-xs font-semibold text-gray-400 uppercase tracking-wider">圖表操作</span>
            <a href="#" id="menu-item-toggle-view" class="menu-item group">
                <i class="fas fa-edit fa-fw mr-3"></i>
                編輯模式
            </a>
            <a href="#" id="menu-item-auto-adjust" class="menu-item group">
                <i class="fas fa-sitemap fa-fw mr-3"></i>
                自動調整節點
            </a>
            <a href="#" id="menu-item-export-png" class="menu-item group">
                <i class="fas fa-image fa-fw mr-3"></i>
                匯出圖檔 (PNG)
            </a>
            <hr class="border-gray-700 my-2">
            <span class="px-1 pt-2 pb-1 text-xs font-semibold text-gray-400 uppercase tracking-wider">分析表格</span>
            <a href="#cause-effect-table-section" id="menu-item-cause-effect-table" class="menu-item group">
                <i class="fas fa-table fa-fw mr-3"></i>
                原因效果表
            </a>
            <a href="#solution-table-section" id="menu-item-solution-table" class="menu-item group">
                <i class="fas fa-lightbulb fa-fw mr-3"></i>
                潛在解決方案表
            </a>
            <a href="#ideas-landscape-section" id="menu-item-ideas-landscape" class="menu-item group">
                <i class="fas fa-map-signs fa-fw mr-3"></i>
                創意景觀圖
            </a>
            <hr class="border-gray-700 my-2">
             <a href="#" id="menu-item-settings" class="menu-item group"> <i class="fas fa-cog fa-fw mr-3"></i>
                設定
            </a>
        </nav>
    </aside>

    <button id="mobile-menu-button" class="md:hidden fixed top-4 left-4 z-50 p-2 bg-gray-700 text-white rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500">
        <i class="fas fa-bars"></i>
    </button>

    <main id="main-content-area" class="flex-1 p-4 md:p-8 overflow-y-auto md:ml-64 transition-all duration-300 ease-in-out">
        <div class="container mx-auto max-w-7xl">
            <header class="mb-6 text-center">
                <h1 id="main-tool-title" class="text-2xl md:text-3xl font-bold text-gray-700">創新問題解決工具</h1>
                <p class="text-gray-500 mt-1">視覺化根本原因，支援衝突參數設定、發明原理應用、解決方案ABC分類、創意景觀圖與TRIZ理想性評估等功能。</p>
            </header>

            <section id="controls-section" class="mb-6 p-4 bg-white rounded-lg shadow">
                 <div id="problem-input-area">
                    <h2 class="text-xl font-semibold text-gray-700 mb-3">1. 設定主要負面效果</h2>
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="text" id="problem-statement-input" placeholder="輸入觀察到的主要負面效果" class="input-field flex-grow p-2 rounded-md border-gray-300 focus:ring-blue-500 focus:border-blue-500">
                        <button id="set-problem-button" class="action-button add-cause text-white font-semibold py-2 px-4 rounded-md">設定問題根源</button>
                    </div>
                </div>
                <div id="tool-buttons" class="mt-4 flex flex-col gap-3">
                    <div class="flex flex-wrap gap-2 justify-center items-center">
                        <button id="undo-button" class="action-button bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-md">
                            <i class="fas fa-undo"></i> 上一步
                        </button>
                        <button id="redo-button" class="action-button bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-md">
                            <i class="fas fa-redo"></i> 下一步
                        </button>
                        <div class="zoom-controls">
                            <button id="zoom-out-button" class="action-button bg-sky-500 hover:bg-sky-600 text-white font-semibold py-2 px-3 rounded-md" title="縮小"><i class="fas fa-search-minus"></i></button>
                            <span id="zoom-level-display">100%</span>
                            <button id="zoom-in-button" class="action-button bg-sky-500 hover:bg-sky-600 text-white font-semibold py-2 px-3 rounded-md" title="放大"><i class="fas fa-search-plus"></i></button>
                            <button id="reset-zoom-button" class="action-button bg-sky-500 hover:bg-sky-600 text-white font-semibold py-2 px-4 rounded-md">重設縮放</button>
                        </div>
                    </div>
                    <div class="flex flex-wrap gap-2 justify-center mt-2">
                        <div id="abc-cause-filter-controls" class="flex gap-2 items-center p-2 bg-gray-100 rounded-md">
                            <span class="text-sm font-medium text-gray-700 mr-1">原因ABC篩選:</span>
                            <button data-filter-type="cause" data-filter="all" class="abc-filter-button bg-gray-500 hover:bg-gray-600 active">全部</button>
                            <button data-filter-type="cause" data-filter="A" class="abc-filter-button bg-red-500 hover:bg-red-600">A類</button>
                            <button data-filter-type="cause" data-filter="B" class="abc-filter-button bg-orange-500 hover:bg-orange-600">B類</button>
                            <button data-filter-type="cause" data-filter="C" class="abc-filter-button bg-amber-500 hover:bg-amber-600">C類</button>
                            <button data-filter-type="cause" data-filter="none" class="abc-filter-button bg-slate-500 hover:bg-slate-600">未分類</button>
                        </div>
                    </div>
                </div>
            </section>

            <section id="rca-diagram-section" class="bg-white p-0 md:p-0 rounded-lg shadow min-h-[400px]">
                <h2 class="text-xl font-semibold text-gray-700 my-4 text-center" id="diagram-title" style="display: none;">2. RCA+ 分析圖</h2>
                <div id="diagram-render-area">
                    <div id="scalable-content-wrapper">
                        <div id="rca-diagram-container"></div>
                        <svg id="svg-connector-layer"></svg>
                    </div>
                </div>
            </section>

            <section id="cause-effect-table-section" style="display: none;" class="data-table-section bg-white p-4 md:p-6 rounded-lg shadow">
                <h2 class="text-xl font-semibold text-gray-700 mb-3">3. 原因效果表</h2>
                <table class="data-table">
                    <thead> <tr><th>原因</th><th>ABC分類</th><th>原因類型</th><th>正面效果</th><th>負面效果</th></tr> </thead>
                    <tbody id="cause-effect-table-body"></tbody>
                </table>
            </section>

            <section id="solution-table-section" style="display: none;" class="data-table-section bg-white p-4 md:p-6 rounded-lg shadow">
                <div class="flex justify-between items-center mb-3">
                    <h2 class="text-xl font-semibold text-gray-700">4. 潛在解決方案表 (TRIZ應用)</h2>
                    <div id="abc-solution-filter-controls" class="flex gap-1 items-center p-1 bg-gray-100 rounded-md">
                        <span class="text-xs font-medium text-gray-600 mr-1">方案ABC篩選:</span>
                        <button data-filter-type="solution" data-filter="all" class="abc-filter-button text-xs px-2 py-1 bg-gray-500 hover:bg-gray-600 active">全</button>
                        <button data-filter-type="solution" data-filter="A" class="abc-filter-button text-xs px-2 py-1 bg-red-500 hover:bg-red-600">A</button>
                        <button data-filter-type="solution" data-filter="B" class="abc-filter-button text-xs px-2 py-1 bg-orange-500 hover:bg-orange-600">B</button>
                        <button data-filter-type="solution" data-filter="C" class="abc-filter-button text-xs px-2 py-1 bg-amber-500 hover:bg-amber-600">C</button>
                        <button data-filter-type="solution" data-filter="none" class="abc-filter-button text-xs px-2 py-1 bg-slate-500 hover:bg-slate-600">未</button>
                    </div>
                </div>
                <table class="data-table">
                    <thead> <tr><th>衝突節點</th><th>改善參數</th><th>惡化參數</th><th>發明原理</th><th>解決方案描述</th><th>方案ABC分類</th><th>理想性評估</th><th>理想性總分</th></tr> </thead>
                    <tbody id="solution-table-body"></tbody>
                </table>
            </section>

            <section id="ideas-landscape-section" style="display: none;" class="data-table-section bg-white p-4 md:p-6 rounded-lg shadow">
                <h2 class="text-xl font-semibold text-gray-700 mb-3">5. 創意景觀圖</h2>
                <div id="ideas-landscape-controls" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4 p-3 bg-gray-50 rounded-md">
                    <div>
                        <label for="landscape-time-threshold" class="block text-sm font-medium text-gray-700">導入所需時間門檻值 (X軸中線):</label>
                        <input type="number" id="landscape-time-threshold" value="10" class="input-field mt-1" placeholder="例如：10 (單位自訂)">
                    </div>
                    <div>
                        <label for="landscape-score-threshold" class="block text-sm font-medium text-gray-700">MCDM分數門檻值 (Y軸中線):</label>
                        <input type="number" id="landscape-score-threshold" value="50" class="input-field mt-1" placeholder="例如：50">
                    </div>
                    <div class="md:col-span-1 flex items-end">
                        <button id="update-ideas-landscape-chart-button" class="action-button bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-md w-full">
                            <i class="fas fa-sync-alt mr-1"></i> 更新圖表
                        </button>
                    </div>
                </div>
                <div class="text-xs text-gray-500 mb-2 p-2 bg-gray-100 rounded-md">
                    <strong>圖形分析說明：</strong>
                    <ul class="list-disc list-inside ml-2">
                        <li>左上 (第二象限): 時間短、總分高 (優先方案)</li>
                        <li>左下 (第三象限): 時間短、總分低 (不值得考慮)</li>
                        <li>右下 (第四象限): 時間長、總分低 (不應執行)</li>
                        <li>右上 (第一象限): 時間長、總分高 (可長期規劃)</li>
                    </ul>
                     <p class="mt-1"><strong>提示：</strong>點的大小可能與成本或理想性相關，點的形狀與ABC分類相關。</p>
                </div>
                <div id="ideas-landscape-chart-container" class="w-full h-[500px] bg-white p-2 rounded shadow">
                    <canvas id="ideas-landscape-chart"></canvas>
                    <div id="ideas-landscape-no-data-message" class="absolute inset-0 flex flex-col items-center justify-center bg-white bg-opacity-90 rounded-lg" style="display: none;">
                        <p class="text-lg font-semibold text-gray-700 mb-2">沒有資料可顯示於創意景觀圖。</p>
                        <p class="text-sm text-gray-600 text-center">請確保您已完成以下步驟：</p>
                        <ul class="list-disc list-inside text-sm text-gray-600 mt-2">
                            <li>為衝突節點新增解決方案。</li>
                            <li>為每個解決方案填寫「導入所需時間」。</li>
                            <li>為每個解決方案進行「理想性評估」，以計算「理想性加權總分」。</li>
                        </ul>
                    </div>
                </div>
            </section>

            <div id="abc-category-modal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center" style="display: none;"></div>
            <div id="triz-solution-modal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center" style="display: none;">
                <div class="modal-content mx-auto p-5 border w-11/12 md:w-3/5 lg:w-3/5 shadow-lg rounded-md bg-white">
                    <button class="modal-close-button" onclick="App.closeTrizSolutionModal()">&times;</button>
                    <div class="mt-3">
                        <h3 class="text-lg leading-6 font-medium text-gray-900 text-center" id="triz-solution-modal-title">設定衝突參數、解決方案與評估資料</h3>
                        <p id="triz-modal-contradiction-node-text" class="text-sm text-gray-600 my-2 text-center"></p>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label for="improving-parameter-select" class="block text-sm font-medium text-gray-700">改善時特性參數:</label>
                                <select id="improving-parameter-select" class="select-field mt-1"></select>
                            </div>
                            <div>
                                <label for="worsening-parameter-select" class="block text-sm font-medium text-gray-700">惡化時特性參數:</label>
                                <select id="worsening-parameter-select" class="select-field mt-1"></select>
                            </div>
                        </div>

                        <div id="suggested-principles-container" style="display: none;">
                            <h5>建議發明原理 (根據矛盾矩陣):</h5>
                            <ol id="suggested-principles-list"></ol> </div>

                        <h4 class="text-md font-semibold text-gray-800 mt-4 mb-2">解決方案列表:</h4>
                        <div id="solutions-list-container" class="max-h-48 overflow-y-auto mb-3"></div>
                        <button id="add-new-solution-entry-button" class="action-button bg-green-500 hover:bg-green-600 text-sm py-1 px-2 mb-2">
                            <i class="fas fa-plus mr-1"></i> 新增解決方案
                        </button>

                        <div id="edit-solution-entry-container" style="display:none;" class="p-3 border rounded-md bg-gray-50 mb-3">
                            <h5 id="edit-solution-title" class="text-sm font-semibold text-gray-700 mb-2"></h5>
                            <input type="hidden" id="editing-solution-id">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2">
                                <div>
                                    <label for="solution-principle-select" class="block text-xs font-medium text-gray-700">選擇發明原理:</label>
                                    <select id="solution-principle-select" class="select-field mt-1 text-sm"></select>
                                </div>
                                 <div> </div>
                                <div class="md:col-span-2">
                                    <label for="solution-description-input" class="block text-xs font-medium text-gray-700">方案描述:</label>
                                    <textarea id="solution-description-input" rows="2" class="input-field mt-1 text-sm" placeholder="輸入此原理對應的具體解決方案描述"></textarea>
                                </div>
                                <div>
                                    <label for="solution-time-required-input" class="block text-xs font-medium text-gray-700">導入所需時間 (單位自訂):</label>
                                    <input type="number" id="solution-time-required-input" class="input-field mt-1 text-sm" placeholder="例如: 5">
                                </div>
                                <div>
                                    <label for="solution-mcdm-score-input" class="block text-xs font-medium text-gray-700">理想性加權總分 (MCDM):</label>
                                    <input type="text" id="solution-mcdm-score-input" class="input-field mt-1 text-sm" placeholder="請進行理想性評估" readonly>
                                </div>
                                 <div>
                                    <label for="solution-cost-input" class="block text-xs font-medium text-gray-700">預估成本 (可選, 單位自訂):</label>
                                    <input type="number" id="solution-cost-input" class="input-field mt-1 text-sm" placeholder="例如: 1000">
                                </div>
                            </div>
                            <div class="mt-3 text-right">
                                <button id="cancel-edit-solution-button" class="action-button bg-gray-400 hover:bg-gray-500 text-xs py-1 px-2 mr-1">取消</button>
                                <button id="save-solution-entry-button" class="action-button bg-blue-500 hover:bg-blue-600 text-xs py-1 px-2">儲存此方案</button>
                            </div>
                        </div>

                        <div class="items-center px-4 py-3 mt-2 text-right border-t">
                            <button id="close-triz-modal-button" class="action-button mr-2 px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400">關閉</button>
                        </div>
                    </div>
                </div>
            </div>

            <div id="ideality-assessment-modal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center" style="display: none;">
                <div class="modal-content mx-auto p-5 border w-11/12 md:w-3/5 lg:w-1/2 shadow-lg rounded-md bg-white">
                    <button class="modal-close-button" onclick="App.closeIdealityAssessmentModal()">&times;</button>
                    <div class="mt-3">
                        <h3 class="text-lg leading-6 font-medium text-gray-900 text-center">TRIZ 理想性評估</h3>
                        <p id="ideality-modal-solution-text" class="text-sm text-gray-600 my-2 text-center"></p>
                        <input type="hidden" id="assessing-solution-contradiction-node-id">
                        <input type="hidden" id="assessing-solution-entry-id">

                        <div id="ideality-criteria-container" class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 mb-4">
                            </div>

                        <div class="text-center my-3">
                            <span class="text-md font-semibold">理想性加權總分: </span>
                            <span id="ideality-total-score-display" class="text-lg font-bold text-blue-600">0.00</span>
                             <p class="text-xs text-gray-500 mt-1">(權重總和建議為1，分數範圍0-10)</p>
                             <p id="ideality-weights-sum-warning" class="text-xs text-red-500 mt-1" style="display:none;">注意：目前權重總和不為 1。請調整權重以確保總和為 1。</p>
                        </div>

                        <div class="items-center px-4 py-3 mt-4 text-right border-t">
                            <button id="reset-ideality-weights-button" class="action-button mr-2 px-4 py-2 bg-gray-400 text-gray-800 rounded-md hover:bg-gray-500">重設權重</button>
                            <button id="cancel-ideality-assessment-button" class="action-button mr-2 px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400">取消</button>
                            <button id="save-ideality-assessment-button" class="action-button px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">儲存評估</button>
                        </div>
                    </div>
                </div>
            </div>

            <div id="and-source-modal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center" style="display: none;">
                 <div class="modal-content mx-auto p-5 border w-11/12 md:w-1/2 lg:w-1/3 shadow-lg rounded-md bg-white">
                    <button class="modal-close-button" onclick="App.domElements.andSourceModal.style.display = 'none'; App.currentAndTargetNodeId = null;">&times;</button>
                    <div class="mt-3">
                        <h3 class="text-lg leading-6 font-medium text-gray-900 text-center">設定 AND 輸入源</h3>
                        <p id="and-source-modal-node-text" class="text-sm text-gray-600 my-2 text-center"></p>
                        <div id="and-source-options-container" class="modal-options-container my-4">
                            </div>
                        <div class="items-center px-4 py-3 mt-4 text-right border-t">
                            <button id="cancel-and-sources-button" class="action-button mr-2 px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400">取消</button>
                            <button id="save-and-sources-button" class="action-button px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">儲存設定</button>
                        </div>
                    </div>
                </div>
            </div>

            <div id="effect-parameter-modal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center" style="display: none;">
                 <div class="modal-content mx-auto p-5 border w-11/12 md:w-1/2 lg:w-2/5 shadow-lg rounded-md bg-white">
                    <button class="modal-close-button" onclick="App.domElements.effectParameterModal.style.display = 'none'; App.currentParameterTargetNodeId = null;">&times;</button>
                    <div class="mt-3">
                        <h3 class="text-lg leading-6 font-medium text-gray-900 text-center">設定效果參數</h3>
                        <p id="effect-parameter-modal-node-text" class="text-sm text-gray-600 my-2 text-center"></p>
                        <div id="effect-parameter-options-container" class="modal-options-container my-4">
                            </div>
                        <div class="items-center px-4 py-3 mt-4 text-right border-t">
                            <button id="cancel-effect-parameters-button" class="action-button mr-2 px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400">取消</button>
                            <button id="save-effect-parameters-button" class="action-button px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">儲存設定</button>
                        </div>
                    </div>
                </div>
            </div>

            <div id="settings-modal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center" style="display: none;">
                <div class="modal-content mx-auto p-5 border w-11/12 md:w-3/4 lg:w-2/3 shadow-lg rounded-md bg-white">
                    <button class="modal-close-button" onclick="App.closeSettingsModal()">&times;</button>
                    <div class="mt-3">
                        <h3 class="text-lg leading-6 font-medium text-gray-900 text-center">工具設定</h3>

                        <div class="mt-4">
                            <h4 class="text-md font-semibold text-gray-800 mb-2">自訂理想性評估準則</h4>
                            <p class="text-sm text-gray-600 mb-3">在這裡管理您的自訂理想性評估準則。這些準則將用於所有解決方案的理想性評估。</p>

                            <div id="custom-criteria-list" class="max-h-60 overflow-y-auto border rounded-md p-2 bg-gray-50">
                                </div>

                            <button id="add-new-criterion-button" class="action-button bg-green-500 hover:bg-green-600 text-sm py-1 px-2 mt-3">
                                <i class="fas fa-plus mr-1"></i> 新增評估準則
                            </button>

                            <div id="edit-criterion-form" class="criterion-form" style="display:none;">
                                <h5 id="criterion-form-title" class="text-sm font-semibold text-gray-700 mb-2"></h5>
                                <input type="hidden" id="editing-criterion-id">
                                <label for="criterion-name-input">準則名稱:</label>
                                <input type="text" id="criterion-name-input" placeholder="例如: 顧客滿意度">
                                <label for="criterion-default-score-input">預設分數 (0-10):</label>
                                <input type="number" id="criterion-default-score-input" min="0" max="10" value="5">
                                <label for="criterion-default-weight-input">預設權重 (0-1):</label>
                                <input type="number" id="criterion-default-weight-input" step="0.01" min="0" max="1" value="0.25">
                                <label for="criterion-description-input">準則說明 (用於提示):</label>
                                <textarea id="criterion-description-input" rows="3" placeholder="詳細說明此準則的意義和評分標準"></textarea>
                                <div class="text-right">
                                    <button id="cancel-criterion-edit-button" class="action-button bg-gray-400 hover:bg-gray-500 text-xs py-1 px-2 mr-1">取消</button>
                                    <button id="save-criterion-button" class="action-button bg-blue-500 hover:bg-blue-600 text-xs py-1 px-2">儲存準則</button>
                                </div>
                            </div>
                        </div>

                        <div class="items-center px-4 py-3 mt-4 text-right border-t">
                            <button id="close-settings-modal-button" class="action-button mr-2 px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400">關閉</button>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </main>

    <script>
        // 將所有功能封裝在一個全域物件 `App` 中，避免污染全域命名空間
        window.App = (function() {
            // --- TRIZMatrix 類別定義 ---
            // 用於管理商業管理參數、發明原理和矛盾矩陣數據。
            class TRIZMatrix {
                #parameters = [
                    "活動效用性", "活動可變性", "活動費用", "活動時間", "活動複雜性",
                    "活動方便性", "活動安全性", "活動可靠性", "系統有效性", "系統可變性",
                    "系統費用", "系統時間", "系統複雜性", "系統方便性", "系統安全性",
                    "系統可靠性", "內部風險", "外部風險", "信息共享", "信息損失",
                    "信息流", "回饋", "物料流", "對系統的有害影響", "系統產生的有害影響",
                    "環境穩定性", "顧客穩定性", "顧客壓力", "組織穩定性", "組織壓力",
                    "適應性/多功能性"
                ];
                #inventivePrinciplesNames = [
                    "分割 (Segmentation)", "取出/分離 (Taking out/Separation)", "改變局部特性 (Local quality)", "非對稱性 (Asymmetry)", "合併/整合 (Merging/Consolidation)",
                    "多用性/多功能 (Universality/Multi-functionality)", "套疊/巢狀結構 (Nesting/Nested doll)", "反制行動 (Anti-weight/Counteraction)", "預先反制行動 (Preliminary anti-action/Prior counteraction)", "預先行動 (Preliminary action/Prior action)",
                    "事先補償/預防 (Cushion in advance/Prior compensation)", "消除緊張 (Equipotentiality/Remove stress)", "另一方向/反向操作 (Do it in reverse/The other way around)", "非直線性 (Spheroidality/Non-linearity)", "動態化 (Dynamics/Dynamization)",
                    "稍微少些或多些(的動作) (Partial or excessive actions/Slightly less or more)", "另外維度/空間 (Another dimension/New dimension)", "共鳴(協調) (Mechanical vibration/Resonance)", "週期行動 (Periodic action)", "連續的有利作用 (Continuity of useful action)",
                    "快速行動 (Skipping/Rushing through)", "轉有害為有利 (Blessing in disguise/Convert harm into benefit)", "回饋 (Feedback)", "中介物/媒介 (Intermediary/Mediator)", "自助/自我服務 (Self-service)",
                    "使用複製品或模型 (Copying/Use copies or models)", "廉價與短期[拋棄式] (Cheap short-living objects/Dispose)", "替換系統運作原理/使用其他原理 (Replacing mechanical system/Use another principle)", "流動性和靈活性 (Pneumatics and hydraulics/Fluidity and flexibility)", "改變邊界條件 (Flexible shells and thin films/Thin films and flexible shells)",
                    "孔洞和網路 (Porous materials/Holes and networks)", "改變外觀/可見度 (Color changes/Change appearance or visibility)", "同質性 (Homogeneity)", "丟棄與恢復 (Discarding and recovering/Rejecting and regenerating parts)", "改變特性 (Parameter changes/Change properties)",
                    "模範轉移 (Phase transitions/Paradigm Shift)", "相對變化 (Thermal Expansion/Relative Change)", "增強的環境 (Enriched Atmosphere/Enhanced Environment)", "鈍性(惰性)環境 (Inert Atmosphere/Inert Environment)", "組合(複合)結構 (Composite Materials/Composite Structures)"
                ];
                #matrixData = [
                    // 原始數據，但每個字串會被解析為數字陣列
                    ["X","26,3,40,2","18,35,28,26","39,8,39,36","33,18,17,7","21,12,6,30","38,39,18,3","36,18,21,3","32,11,5,11","12,16,23,2","18,23,15,38","26,25,21,19","39,22,2,33","38,24,3,6,28","16,17,28,8","38,6,4,21","17,29,15,14","11,30,8,5","19,22,29,33,11","29,10,16,19,3","16,26,21,3","4,21,11,24","4,40,10,15","5,2,16,26","39,21,40,27","11,39,15,36","23,16,22","14,4,28,40","34,25,16,3","18,8,40,22","33,40,19,3"],
                    ["3,35,40,2","X","7,39,20","21,39,35,26","18,35,1,40","9,27,26,21,25","1,2,24,22","12,5,6,30","24,19,26,3","17,7,19,39","21,13,20,35","27,2,5,13","30,4,24,20","18,9,28,1","28,26,2,15","2,15,39,8","21,12,20,40","16,38,10,12","13,19,37,11","9,31,29,7","18,24,36,33,18","38,39,17,37","39,18,1,2,23,14","38,28,36,39","25,20,24,27","2,27,19,5","26,27,1,17","32,12,33,11","32,13,23,4,19","2,35,26,37","35,16,34,11"],
                    ["18,35,28,26","7,39,20","X","40,9,27,26","21,12,6,30","19,15,30,29","36,24,27,29","24,22,8,16","39,40,25,30","8,16,26,9","38,33,17,29","31,33,28,10","34,1,5,36","25,23,37,8","30,12,22,40,35","32,11,10,16,17","28,8,38,6","4,21,17,29","38,15,14","11,30,8,5","19,22,29,33,11","29,10,16,19,3","16,26,21,3","4,21,11,24","4,40,10,15","5,2,16,26","39,21,40,27","11,39,15,36","23,16,22","14,4,28,40","34,25,16,3"],
                    ["39,8,39,36","21,39,35,26","40,9,27,26","X","24,19,26,3","17,7,19,39","21,13,20,35","27,2,5,13","30,4,24,20","18,9,28,1","28,26,2,15","2,15,39,8","21,12,20,40","16,38,10,12","13,19,37,11","9,31,29,7","18,24,36,33,18","38,39,17,37","39,18,1,2,23,14","38,28,36,39","25,20,24,27","2,27,19,5","26,27,1,17","32,12,33,11","32,13,23,4,19","2,35,26,37","35,16,13,10","17,15,32,18,14,37","26,4,30,9","31,25,4,19,15","27,2"],
                    ["33,18,17,7","18,35,1,40","21,12,6,30","24,19,26,3","X","35,20,23,5","36,24,30,29","19,15,40,39","38,40,16,5","36,33,25,26","23,18,33,6","27,38,2,4","19,4,28,11","8,21,36,5","32,10,22,36","26,27,18,21","26,21,30,22","40,23,39,17","9,1,8,39,17","33,37,9,35,19","28,15,24,27","15,19,13,15,31","1,26,11,32","38,39,25,27","24,21,8,34,18","29,11,30,2","31,32,11,4,5","7,1,8,16","5,34,2,40","26,2,3,29","30,8,30,5"],
                    ["21,12,6,30","9,27,26,21,25","19,15,30,29","17,7,19,39","35,20,23,5","X","24,22,8,16","39,40,25,30","8,16,26,9","38,33,17,29","31,33,28,10","34,1,5,36","25,23,37,8","30,12,22,40,35","32,11,10,16,17","28,8,38,6","4,21,17,29","38,15,14","11,30,8,5","19,22,29,33,11","29,10,16,19,3","16,26,21,3","4,21,11,24","4,40,10,15","5,2,16,26","39,21,40,27","11,39,15,36","23,16,22","14,4,28,40","34,25,16,3","18,8,40,22"],
                    ["38,39,18,3","1,2,24,22","36,24,27,29","21,13,20,35","36,24,30,29","24,22,8,16","X","18,35,28,26","39,8,39,36","33,18,17,7","21,12,6,30","38,39,18,3","36,18,21,3","32,11,5,11","12,16,23,2","18,23,15,38","26,25,21,19","39,22,2,33","38,24,3,6,28","16,17,28,8","38,6,4,21","17,29,15,14","11,30,8,5","19,22,29,33,11","29,10,16,19,3","16,26,21,3","4,21,11,24","4,40,10,15","5,2,16,26","39,21,40,27","11,39,15,36"],
                    ["36,18,21,3","12,5,6,30","24,22,8,16","27,2,5,13","19,15,40,39","39,40,25,30","18,35,28,26","X","24,19,26,3","17,7,19,39","21,13,20,35","27,2,5,13","30,4,24,20","18,9,28,1","28,26,2,15","2,15,39,8","21,12,20,40","16,38,10,12","13,19,37,11","9,31,29,7","18,24,36,33,18","38,39,17,37","39,18,1,2,23,14","38,28,36,39","25,20,24,27","2,27,19,5","26,27,1,17","32,12,33,11","32,13,23,4,19","2,35,26,37","35,16,34,11"],
                    ["32,11,5,11","24,19,26,3","39,40,25,30","30,4,24,20","38,40,16,5","8,16,26,9","33,18,17,7","24,19,26,3","X","14,17,18,17","21,39,39,24","14,26,36,39","12,16,23,34","11,29,8,5","16,19,25,9","30,12,10,18,23","24,3,4,21","11,30,10,16","33,11,33,6","9,26,5,11","30,1,37,13","17,40,18,31","1,14,33,31","18,27,23,22","25,38,11,26,9","31,33,28,18","16,5,32,24","23,4,10,4","21,27,30,10","16,1,32,37","8,7,6,40"],
                    ["12,16,23,2","17,7,19,39","8,16,26,9","18,9,28,1","36,33,25,26","38,33,17,29","21,12,6,30","17,7,19,39","14,17,18,17","X","36,7,23,34","17,29,23,22","25,38,11,14,17","18,17,21,39","17,40,39,24","14,26,36,39","12,16,23,34","11,29,8,5","16,19,25,9","30,12,10,18,23","24,3,4,21","11,30,10,16","33,11,33,6","9,26,5,11","30,1,37,13","17,40,18,31","1,14,33,31","18,27,23,22","25,38,11,26,9","31,33,28,18","16,5,32,24"],
                    ["18,23,15,38","21,13,20,35","38,33,17,29","28,26,2,15","23,18,33,6","31,33,28,10","38,39,18,3","21,13,20,35","21,39,39,24","36,7,23,34","X","14,26,12,1","37,8,7,6,40","36,13,14,17","18,17,21,39","17,40,39,24","14,26,36,39","12,16,23,34","11,29,8,5","16,19,25,9","30,12,10,18,23","24,3,4,21","11,30,10,16","33,11,33,6","9,26,5,11","30,1,37,13","17,40,18,31","1,14,33,31","18,27,23,22","25,38,11,26,9","31,33,28,18"],
                    ["26,25,21,19","27,2,5,13","34,1,5,36","2,15,39,8","27,38,2,4","34,1,5,36","36,18,21,3","27,2,5,13","14,26,36,39","17,29,23,22","14,26,12,1","X","32,18,8,35","2,23,14,17","18,17,21,39","17,40,39,24","14,26,36,39","12,16,23,34","11,29,8,5","16,19,25,9","30,12,10,18,23","24,3,4,21","11,30,10,16","33,11,33,6","9,26,5,11","30,1,37,13","17,40,18,31","1,14,33,31","18,27,23,22","25,38,11,26,9"],
                    ["39,22,2,33","30,4,24,20","25,23,37,8","16,38,10,12","19,4,28,11","25,23,37,8","32,11,5,11","30,4,24,20","12,16,23,34","25,38,11,14,17","37,8,7,6,40","32,18,8,35","X","38,18,8,16","39,24,14,17","1,35,29,21","34,30,6,22","23,15,11,37,3","18,2,28,40","15,10,18,17","26,24,14,34,4","36,15,6,33,15","25,19,14,16","34,28,32,10","12,1,40,4","12,1,36,39","39,12,18,38","32,37,16,19","1,14,14,26","14,16,10,9,3","40,35,38,19"],
                    ["38,24,3,6,28","18,9,28,1","30,12,22,40,35","13,19,37,11","8,21,36,5","30,12,22,40,35","12,16,23,2","18,9,28,1","11,29,8,5","16,19,25,9","36,13,14,17","2,23,14,17","38,18,8,16","X","26,1,37,3","21,7,30,26","38,14,33,19","8,35,35,21","8,5,3,34","21,5,37,33","24,17,21,38","31,10,40,24,25","33,19,34,5,3","1,33,8,38","39,4,40,2,16","16,1,24,25","18,24,19,5","34,35,28","32,6,29,36","37,12,18,24"],
                    ["16,17,28,8","28,26,2,15","32,11,10,16,17","9,31,29,7","32,10,22,36","32,11,10,16,17","18,23,15,38","28,26,2,15","16,19,25,9","30,12,10,18,23","18,17,21,39","17,40,39,24","39,24,14,17","26,1,37,3","X","12,18,24,5,11","34,35,28,32,6","29,36,37,12,18,24","27,22,26,15","7,18,37,34,30","39,12,5,11","29,36,37,33,21","1,8,7,6,22","18,38,12,34","23,8,26,27","36,34,18,27","13,17,32,10","25,29,29","35,29,6,40","23,15,15,6","20,37,21,14","38,14,12,30"],
                    ["38,6,4,21","2,15,39,8","28,8,38,6","18,24,36,33,18","26,27,18,21","28,8,38,6","26,25,21,19","2,15,39,8","30,12,10,18,23","24,3,4,21","17,40,39,24","14,26,36,39","1,35,29,21","21,7,30,26","12,18,24,5,11","X","10,3,15,25","37,12,36,12","9,4,1,2","36,10,30,29","16,17,30,27","24,4,23,32","8,39,18,10,23","16,12,26,31","38,32,5,8","19,20,33,8","8,33,19,10","30,29,25,23,22","35,34,9,38,20","23,20,38,27","26,11,28,14"],
                    ["17,29,15,14","39,8,21,12","4,21,17,29","38,39,17,37","26,21,30,22","4,21,17,29","39,22,2,33","21,12,20,40","24,3,4,21","11,30,10,16","14,26,36,39","12,16,23,34","34,30,6,22","38,14,33,19","34,35,28,32,6","10,3,15,25","X","37,12,2,24","20,40,4,18,12","16,5,23,32","25,23,31,22","35,37,10,34","24,20,15,23","39,18,15,34","3,16,12,10,26","39,32,38,18,25","21,15,3,38","37,13,28,35,34","10,34,15,30","26,11,22,35","27,16,1,30"],
                    ["11,30,8,5","20,40,16,38","38,15,14","39,18,1,2","40,23,39,17","38,15,14","38,24,3,6,28","16,38,10,12","11,30,10,16","33,11,33,6","12,16,23,34","11,29,8,5","23,15,11,37,3","8,35,35,21","29,36,37,12,18,24","37,12,36,12","37,12,2,24","X","9,4,1,2","36,10,30,29","16,17,30,27","24,4,23,32","8,39,18,10,23","16,12,26,31","38,32,5,8","19,20,33,8","8,33,19,10","30,29,25,23,22","35,34,9,38,20","23,20,38,27","26,11,28,14"],
                    ["19,22,29,33,11","10,12,13,19","11,30,8,5","23,14,38,28","9,1,8,39,17","11,30,8,5","16,17,28,8","13,19,37,11","33,11,33,6","9,26,5,11","11,29,8,5","16,19,25,9","18,2,28,40","8,5,3,34","27,22,26,15","9,4,1,2","20,40,4,18,12","9,4,1,2","X","7,14,26,11","21,6,21,9","2,24,35,37","36,11,4,20","10,24,13,25","8,25,11,6","9,31,8,16","23,40,16,21","40,4,18,12","16,5,12,22","9,37,4,28","33,39,10,34"],
                    ["29,10,16,19,3","37,11,9,31","19,22,29,33,11","36,39,25,20","33,37,9,35,19","19,22,29,33,11","38,6,4,21","9,31,29,7","9,26,5,11","30,1,37,13","16,19,25,9","30,12,10,18,23","15,10,18,17","21,5,37,33","7,18,37,34,30","36,10,30,29","16,5,23,32","36,10,30,29","7,14,26,11","X","10,34,10,34","23,22,35,34","9,38,20","23,20,38,27","26,7,32,10","14,19,3,12,28","10,3,15,25","37,12,36,12","9,4,1,2","36,10,30,29","16,17,30,27"],
                    ["16,26,21,3","29,7,18,24","29,10,16,19,3","24,27,2,27","28,15,24,27","29,10,16,19,3","17,29,15,14","18,24,36,33,18","30,1,37,13","17,40,18,31","30,12,10,18,23","24,3,4,21","26,24,14,34,4","24,17,21,38","39,12,5,11","16,17,30,27","25,23,31,22","16,17,30,27","21,6,21,9","10,34,10,34","X","2,3,13,16","1,39,21,6","8,37,3,23","7,9,9,8,5","29,10,27,39","1,20,7,6","3,15,20,26","23,32,1,14,31","13,19,29,13","37,29,13,3"],
                    ["4,21,11,24","36,33,18,39","16,26,21,3","19,5,26,27","15,19,13,15,31","16,26,21,3","11,30,8,5","38,39,17,37","17,40,18,31","1,14,33,31","24,3,4,21","11,30,10,16","36,15,6,33,15","31,10,40,24,25","29,36,37,33,21","24,4,23,32","35,37,10,34","24,4,23,32","2,24,35,37","23,22,35,34","2,3,13,16","X","36,12,1,15","19,16,8,13,32","14,36,8,2,3","2,3,13,3","37,24,35,10","15,11,20,12,32","19,31,25,32","30,3,34,25","33,24,7,35"],
                    ["4,40,10,15","18,39,17,37","4,21,11,24","32,12,1,17","1,26,11,32","4,21,11,24","19,22,29,33,11","39,18,1,2","1,14,33,31","18,27,23,22","11,30,10,16","33,11,33,6","25,19,14,16","33,19,34,5,3","8,7,6,22","8,39,18,10,23","24,20,15,23","8,39,18,10,23","36,11,4,20","9,38,20","1,39,21,6","36,12,1,15","X","28,36,19,16","24,38,29,33","32,34,11,7","32,31,25,27","19,11,35,17","30,2,1,2,39,8","21,19,7,28","35,4,24,22"],
                    ["5,2,16,26","23,14,38,28","4,40,10,15","33,11,32,13","38,39,25,27","4,40,10,15","29,10,16,19,3","23,14,38,28","18,27,23,22","25,38,11,26,9","33,11,33,6","9,26,5,11","34,28,32,10","1,33,8,38","18,38,12,34","16,12,26,31","39,18,15,34","16,12,26,31","10,24,13,25","23,20,38,27","8,37,3,23","19,16,8,13,32","28,36,19,16","X","35,30,9,27","33,6,24,22","38,20,37,7","37,23,35,37,29","10,16,34,5","37,14,26,38","28,10,4,16,38"],
                    ["39,21,40,27","36,39,25,20","5,2,16,26","2,35,26,37","24,21,8,34,18","5,2,16,26","16,26,21,3","25,20,24,27","25,38,11,26,9","31,33,28,18","9,26,5,11","30,1,37,13","12,1,40,4","39,4,40,2,16","23,8,26,27","38,32,5,8","3,16,12,10,26","38,32,5,8","8,25,11,6","26,7,32,10","7,9,9,8,5","14,36,8,2,3","24,38,29,33","35,30,9,27","X","37,7,11,40","5,1,29,6,39","3,7,34,40,28,33","2,35,10,13","4,33,25,38","39,8,19,11"],
                    ["11,39,15,36","24,22,8,16","39,21,40,27","35,16,34,11","29,11,30,2,31","39,21,40,27","4,21,11,24","2,27,19,5","31,33,28,18","16,5,32,24","30,1,37,13","17,40,18,31","12,1,36,39","16,1,24,25","36,34,18,27","19,20,33,8","39,32,38,18,25","19,20,33,8","9,31,8,16","14,19,3,12,28","29,10,27,39","2,3,13,3","32,34,11,7","24,22,38,20","37,7,11,40","X","39,19,9,2,35","10,13,40,18","38,7,2,16","16,15,10,24,19","2,5,30,15,14"],
                    ["23,16,22","8,16,26,9","11,39,15,36","13,10,17,15","32,11,4,5","11,39,15,36","4,40,10,15","26,27,1,17","16,5,32,24","23,4,10,4","17,40,18,31","1,14,33,31","39,12,18,38","18,24,19,5","13,17,32,10","8,33,19,10","8,33,19,10","23,40,16,21","37,12,36,12","10,3,15,25","1,20,7,6","37,24,35,10","32,31,25,27","37,23,35,37,29","5,1,29,6,39","39,19,9,2,35","X","13,32,17,38","17,30,5,1","4,38,14,6","22,18,30,10,9,1"],
                    ["14,4,28,40","38,33,17,29","23,16,22","32,18,14,37","7,1,8,16","23,16,22","5,2,16,26","32,12,33,11","23,4,10,4","21,27,30,10","1,14,33,31","18,27,23,22","32,37,16,19","34,35,28","25,29,29","30,29,25,23,22","25,29,29","40,4,18,12","16,5,12,22","37,12,36,12","3,15,20,26","15,11,20,12,32","19,11,35,17","10,16,34,5","6,39,3,7","10,13,40,18","13,32,17,38","X","9,28,15,17,40","29,21,5,1","23,10,9,38,1,37"],
                    ["34,25,16,3","31,33,28,10","14,4,28,40","26,4,30,9","5,34,2,40","14,4,28,40","39,21,40,27","32,13,23,4,19","21,27,30,10","16,1,32,37","18,27,23,22","25,38,11,26,9","1,14,14,26","32,6,29,36","35,29,6,40","35,34,9,38,20","35,34,9,38,20","16,15,10","9,37,4,28","9,4,1,2","23,32,1,14,31","30,3,34,25","30,2,1,2,39,8","21,19,7,28","34,40,28,33","38,7,2,16","17,30,5,1","9,28,15,17,40","X","14,10,29,21","40,3,18,37,32,34"],
                    ["18,8,40,22","34,1,5,36","34,25,16,3","31,25,4,19,15","26,2,3,29","34,25,16,3","11,39,15,36","2,35,26,37","16,1,32,37","8,7,6,40","25,38,11,26,9","31,33,28,18","14,16,10,9,3","37,12,18,24","23,15,15,6","23,20,38,27","23,20,38,27","24,19,2,5","33,39,10,34","36,10,30,29","13,19,29,13","33,24,7,35","35,17,30,2","37,14,26,38","2,35,10,13","16,15,10","4,38,14,6","29,21,5,1","14,10,29,21","X","32,2,17,40,22,18"],
                    ["33,40,19,3","25,23,37,8","18,8,40,22","19,15,27,2","30,8,30,5","18,8,40,22","23,16,22","35,16,34,11","8,7,6,40","36,13,14,17","31,33,28,18","16,5,32,24","40,35,38,19","12,18,24,5,11","20,37,21,14","26,11,22,35","26,11,22,35","24,19,2,5","26,11,22,35","16,17,30,27","37,29,13,3","7,35,9,27","11,7,2,35","35,30,32,34","24,38,29,33","4,33,25,38","22,18,30,10","23,10,9,38","40,3,18,37","32,2,17,40","X"]
                ].map(row => row.map(cell => cell === "X" ? [] : cell.split(',').map(Number)));

                getParameters() { return [...this.#parameters]; }
                getInventivePrinciplesNames() { return [...this.#inventivePrinciplesNames]; }
                getPrincipleName(principleNumber) {
                    if (principleNumber >= 1 && principleNumber <= this.#inventivePrinciplesNames.length) {
                        return this.#inventivePrinciplesNames[principleNumber - 1];
                    }
                    console.warn(`無效的發明原理編號: ${principleNumber}`);
                    return null;
                }
                getRecommendedPrinciples(improvingParameterIndex, worseningParameterIndex) {
                    if (improvingParameterIndex < 0 || improvingParameterIndex >= this.#parameters.length ||
                        worseningParameterIndex < 0 || worseningParameterIndex >= this.#parameters.length) {
                        console.error("無效的參數索引。請確保索引在0到30之間。");
                        return [];
                    }
                    const principlesNumbers = this.#matrixData[improvingParameterIndex][worseningParameterIndex];
                    return principlesNumbers ? principlesNumbers.map(num => this.getPrincipleName(num)).filter(name => name !== null) : [];
                }
                getRecommendedPrinciplesByName(improvingParameterName, worseningParameterName) {
                    const improvingIndex = this.#parameters.indexOf(improvingParameterName);
                    const worseningIndex = this.#parameters.indexOf(worseningParameterName);
                    if (improvingIndex === -1) { console.error(`改善參數名稱無效: ${improvingParameterName}`); return []; }
                    if (worseningIndex === -1) { console.error(`惡化參數名稱無效: ${worseningParameterName}`); return []; }
                    return this.getRecommendedPrinciples(improvingIndex, worseningIndex);
                }
            }

            // --- 全域變數與常數 ---
            let domElements = {};
            let rcaData = null;
            let nodeIdCounter = 0;
            let currentAndTargetNodeId = null;
            let isFinalizedView = false;
            let currentParameterTargetNodeId = null;
            let currentZoom = 1.0;
            let historyStack = [];
            let historyIndex = -1;
            let currentAbcCauseTargetNodeId = null;
            let currentAbcCauseFilter = 'all';
            let currentAbcSolutionFilter = 'all';
            let currentTrizContradictionNodeId = null;
            let ideasLandscapeChartInstance = null;
            let currentAssessingSolution = { contradictionNodeId: null, solutionId: null };

            let customIdealityCriteria = [];
            // 更新預設理想性評估準則，使其更豐富
            const DEFAULT_IDEALITY_CRITERIA = [
                { id: 'crit-1', name: '問題是否完全解決？', defaultScore: 5, defaultWeight: 0.15, description: '此方案解決問題的程度。\n0 分：完全沒有解決問題。\n5 分：部分解決問題，但仍有明顯缺陷或遺留問題。\n10 分：完美解決所有問題，無任何遺留或副作用。' },
                { id: 'crit-2', name: '是否為雙贏局面？', defaultScore: 5, defaultWeight: 0.15, description: '此方案是否能為所有相關方（如顧客、員工、公司、環境）帶來正面效益，避免零和遊戲。\n0 分：對某些方有害，或只有一方受益。\n5 分：各方利益平衡，但無顯著增益。\n10 分：所有相關方皆能顯著受益，達到共贏。' },
                { id: 'crit-3', name: '有無產生負面效應？', defaultScore: 5, defaultWeight: 0.15, description: '此方案是否會產生新的負面效果或惡化現有問題。\n0 分：產生許多新的負面效果，或使現有問題更糟。\n5 分：產生輕微負面效果，或對現有問題無影響。\n10 分：完全沒有產生任何負面效果。' },
                { id: 'crit-4', name: '多符合理想性 (低成本/資源)？', defaultScore: 5, defaultWeight: 0.15, description: '此方案是否能以最低的成本、時間、人力、資源等達成目標。\n0 分：需要極高的成本和資源投入。\n5 分：成本和資源投入適中。\n10 分：幾乎不需額外成本或資源，利用現有條件達成。' },
                { id: 'crit-5', name: '創新性/獨特性', defaultScore: 5, defaultWeight: 0.20, description: '此方案是否具有創新性或獨特性？\n0 分：缺乏新意，為常見方案。\n5 分：有一定新意，但非突破性。\n10 分：極具創新性，獨一無二，可能開創新的領域。' },
                { id: 'crit-6', name: '實施難度/可行性', defaultScore: 5, defaultWeight: 0.20, description: '此方案的實施難度與可行性。\n0 分：實施極其困難，幾乎不可行。\n5 分：實施有一定難度，但可行。\n10 分：實施簡單，資源易得，高度可行。' }
            ];
            let criterionIdCounter = 0;

            const trizMatrix = new TRIZMatrix(); // 實例化 TRIZMatrix

            const ZOOM_STEP = 0.1;
            const MIN_ZOOM = 0.2;
            const MAX_ZOOM = 3.0;
            const MAX_HISTORY_STATES = 50;
            const QUADRANT_COLORS = {
                Q1: 'rgba(220, 252, 231, 0.4)', Q2: 'rgba(219, 234, 254, 0.4)',
                Q3: 'rgba(254, 226, 226, 0.4)', Q4: 'rgba(254, 249, 195, 0.4)',
            };
            const QUADRANT_LABELS = {
                Q1: '長期規劃 (Q1)', Q2: '優先方案 (Q2)',
                Q3: '不值得考慮 (Q3)', Q4: '不應執行 (Q4)'
            };
            const ABC_POINT_STYLES = { 'A': 'rectRot', 'B': 'triangle', 'C': 'star', 'none': 'circle' };
            const ABC_COLORS = {
                'A': 'rgba(239, 68, 68, 0.8)', 'B': 'rgba(249, 115, 22, 0.8)',
                'C': 'rgba(245, 158, 11, 0.8)', 'none': 'rgba(107, 114, 128, 0.7)'
            };
            const ABC_BORDER_COLORS = {
                'A': 'rgba(220, 38, 38, 1)', 'B': 'rgba(234, 88, 12, 1)',
                'C': 'rgba(217, 119, 6, 1)', 'none': 'rgba(75, 85, 99, 1)'
            };
            const EFFECT_PARAMETERS = {
                "活動": ["活動效用性", "活動可變性", "活動費用", "活動時間", "活動複雜性", "活動方便性", "活動安全性", "活動可靠性"],
                "系統": ["系統有效性", "系統可變性", "系統費用", "系統時間", "系統複雜性", "系統方便性", "系統安全性", "系統可靠性", "對系統的有害影響", "系統產生的有害影響", "組織壓力", "組織穩定性"],
                "其他": ["內部風險", "外部風險", "信息共享", "信息損失", "信息流", "回饋", "物料流", "適應性/多功能性", "顧客壓力", "顧客穩定性", "環境穩定性"]
            };
            const BUSINESS_MANAGEMENT_PARAMETERS = ["未選擇", ...trizMatrix.getParameters()];
            const INVENTIVE_PRINCIPLES = trizMatrix.getInventivePrinciplesNames();

            // --- 輔助函數 ---
            function deepCopy(obj) { return JSON.parse(JSON.stringify(obj)); }

            /**
             * 填充下拉選單。
             * @param {HTMLElement} selectElement - 要填充的 select 元素。
             * @param {Array<string>} optionsArray - 包含選項文字的陣列。
             * @param {boolean} includeDefault - 是否包含「未選擇」選項。
             */
            function populateSelect(selectElement, optionsArray, includeDefault = true) {
                if (!selectElement) return;
                selectElement.innerHTML = '';
                if (includeDefault) {
                    const defaultOption = document.createElement('option');
                    defaultOption.value = "";
                    defaultOption.textContent = "未選擇";
                    selectElement.appendChild(defaultOption);
                }
                optionsArray.forEach(optionText => {
                    // 避免重複添加「未選擇」選項
                    if (includeDefault && optionText === "未選擇" && optionsArray.indexOf("未選擇") !== 0) return;
                    const option = document.createElement('option');
                    option.value = optionText;
                    option.textContent = optionText;
                    selectElement.appendChild(option);
                });
            }

            /**
             * 建立一個帶有樣式和事件監聽器的按鈕。
             * @param {string} text - 按鈕上顯示的文字。
             * @param {string} className - 要添加到按鈕的 CSS 類名。
             * @param {function} onClickHandler - 按鈕點擊時執行的函式。
             * @returns {HTMLButtonElement} 建立的按鈕元素。
             */
            function createActionButton(text, className, onClickHandler) {
                const button = document.createElement('button');
                button.classList.add('action-button', ...className.split(' '));
                button.textContent = text;
                button.addEventListener('click', onClickHandler);
                return button;
            }

            /**
             * 遞迴地在 RCA 數據結構中按 ID 查找節點。
             * @param {object} node - 當前要檢查的節點。
             * @param {string} id - 要查找的節點 ID。
             * @returns {object|null} 找到的節點對象，如果未找到則為 null。
             */
            function findNodeById(node, id) {
                if (!node || typeof node !== 'object') return null;
                if (node.id === id) return node;
                if (node.children && Array.isArray(node.children)) {
                    for (const child of node.children) {
                        if(!child) continue;
                        const found = findNodeById(child, id);
                        if (found) return found;
                    }
                }
                return null;
            }

            /**
             * 檢查節點的直接子節點是否同時包含正面效果和負面效果。
             * @param {object} nodeData - 要檢查的節點數據。
             * @returns {{hasPositiveChild: boolean, hasNegativeChild: boolean}} 包含檢查結果的對象。
             */
            function checkChildrenEffects(nodeData) {
                let hasPositiveChild = false;
                let hasNegativeChild = false;
                if (nodeData.children && Array.isArray(nodeData.children)) {
                    for (const child of nodeData.children) {
                        if(!child) continue;
                        if (child.type === 'positive-effect') hasPositiveChild = true;
                        if (child.type === 'negative-effect') hasNegativeChild = true;
                        if (hasPositiveChild && hasNegativeChild) break; // 只要找到一個正面和一個負面就停止
                    }
                }
                return { hasPositiveChild, hasNegativeChild };
            }

            // --- DOM 元素初始化 ---
            function initializeDomElements() {
                domElements = {
                    mainToolTitle: document.getElementById('main-tool-title'),
                    problemInput: document.getElementById('problem-statement-input'),
                    setProblemButton: document.getElementById('set-problem-button'),
                    diagramRenderArea: document.getElementById('diagram-render-area'),
                    scalableContentWrapper: document.getElementById('scalable-content-wrapper'),
                    diagramContainer: document.getElementById('rca-diagram-container'),
                    svgLayer: document.getElementById('svg-connector-layer'),
                    diagramTitle: document.getElementById('diagram-title'),
                    problemInputArea: document.getElementById('problem-input-area'),
                    toolButtonsContainer: document.getElementById('tool-buttons'),
                    sidebarFileMenuTrigger: document.getElementById('sidebar-file-menu-trigger'),
                    fileDropdownContent: document.getElementById('file-dropdown-content'),
                    saveDiagramButton: document.getElementById('save-diagram-button'),
                    loadDiagramButton: document.getElementById('load-diagram-button'),
                    saveToFileButton: document.getElementById('save-to-file-button'),
                    loadFromFileLabel: document.getElementById('load-from-file-label'),
                    fileInputForLoad: document.getElementById('file-input-for-load'),
                    undoButton: document.getElementById('undo-button'),
                    redoButton: document.getElementById('redo-button'),
                    zoomOutButton: document.getElementById('zoom-out-button'),
                    zoomInButton: document.getElementById('zoom-in-button'),
                    resetZoomButton: document.getElementById('reset-zoom-button'),
                    zoomLevelDisplay: document.getElementById('zoom-level-display'),
                    causeEffectTableSection: document.getElementById('cause-effect-table-section'),
                    causeEffectTableBody: document.getElementById('cause-effect-table-body'),
                    solutionTableSection: document.getElementById('solution-table-section'),
                    solutionTableBody: document.getElementById('solution-table-body'),
                    andSourceModal: document.getElementById('and-source-modal'),
                    andSourceModalNodeText: document.getElementById('and-source-modal-node-text'),
                    andSourceOptionsContainer: document.getElementById('and-source-options-container'),
                    cancelAndSourcesButton: document.getElementById('cancel-and-sources-button'),
                    saveAndSourcesButton: document.getElementById('save-and-sources-button'),
                    effectParameterModal: document.getElementById('effect-parameter-modal'),
                    abcCategoryModal: document.getElementById('abc-category-modal'),
                    abcCauseFilterControls: document.getElementById('abc-cause-filter-controls'),
                    abcSolutionFilterControls: document.getElementById('abc-solution-filter-controls'),
                    trizSolutionModal: document.getElementById('triz-solution-modal'),
                    trizModalContradictionNodeText: document.getElementById('triz-modal-contradiction-node-text'),
                    improvingParameterSelect: document.getElementById('improving-parameter-select'),
                    worseningParameterSelect: document.getElementById('worsening-parameter-select'),
                    suggestedPrinciplesContainer: document.getElementById('suggested-principles-container'),
                    suggestedPrinciplesList: document.getElementById('suggested-principles-list'),
                    solutionsListContainer: document.getElementById('solutions-list-container'),
                    addNewSolutionEntryButton: document.getElementById('add-new-solution-entry-button'),
                    editSolutionEntryContainer: document.getElementById('edit-solution-entry-container'),
                    editingSolutionIdInput: document.getElementById('editing-solution-id'),
                    solutionPrincipleSelect: document.getElementById('solution-principle-select'),
                    solutionDescriptionInput: document.getElementById('solution-description-input'),
                    solutionTimeRequiredInput: document.getElementById('solution-time-required-input'),
                    solutionMcdmScoreInput: document.getElementById('solution-mcdm-score-input'),
                    solutionCostInput: document.getElementById('solution-cost-input'),
                    saveSolutionEntryButton: document.getElementById('save-solution-entry-button'),
                    cancelEditSolutionButton: document.getElementById('cancel-edit-solution-button'),
                    editSolutionTitle: document.getElementById('edit-solution-title'),
                    ideasLandscapeSection: document.getElementById('ideas-landscape-section'),
                    ideasLandscapeChartCanvas: document.getElementById('ideas-landscape-chart'),
                    ideasLandscapeNoDataMessage: document.getElementById('ideas-landscape-no-data-message'),
                    updateIdeasLandscapeChartButton: document.getElementById('update-ideas-landscape-chart-button'),
                    landscapeTimeThresholdInput: document.getElementById('landscape-time-threshold'),
                    landscapeScoreThresholdInput: document.getElementById('landscape-score-threshold'),
                    idealityAssessmentModal: document.getElementById('ideality-assessment-modal'),
                    idealityModalSolutionText: document.getElementById('ideality-modal-solution-text'),
                    assessingSolutionContradictionNodeIdInput: document.getElementById('assessing-solution-contradiction-node-id'),
                    assessingSolutionEntryIdInput: document.getElementById('assessing-solution-entry-id'),
                    idealityCriteriaContainer: document.getElementById('ideality-criteria-container'),
                    idealityTotalScoreDisplay: document.getElementById('ideality-total-score-display'),
                    idealityWeightsSumWarning: document.getElementById('ideality-weights-sum-warning'),
                    saveIdealityAssessmentButton: document.getElementById('save-ideality-assessment-button'),
                    cancelIdealityAssessmentButton: document.getElementById('cancel-ideality-assessment-button'),
                    resetIdealityWeightsButton: document.getElementById('reset-ideality-weights-button'),
                    effectParameterModalNodeText: document.getElementById('effect-parameter-modal-node-text'),
                    effectParameterOptionsContainer: document.getElementById('effect-parameter-options-container'),
                    cancelEffectParametersButton: document.getElementById('cancel-effect-parameters-button'),
                    saveEffectParametersButton: document.getElementById('save-effect-parameters-button'),
                    dashboardMenu: document.getElementById('dashboard-menu'),
                    mobileMenuButton: document.getElementById('mobile-menu-button'),
                    mainContentArea: document.getElementById('main-content-area'),
                    menuItemToggleView: document.getElementById('menu-item-toggle-view'),
                    menuItemAutoAdjust: document.getElementById('menu-item-auto-adjust'),
                    menuItemExportPng: document.getElementById('menu-item-export-png'),
                    menuItemCauseEffectTable: document.getElementById('menu-item-cause-effect-table'),
                    menuItemSolutionTable: document.getElementById('menu-item-solution-table'),
                    menuItemIdeasLandscape: document.getElementById('menu-item-ideas-landscape'),
                    menuItemSettings: document.getElementById('menu-item-settings'),
                    closeSettingsModalButton: document.getElementById('close-settings-modal-button'),
                    customCriteriaList: document.getElementById('custom-criteria-list'),
                    addNewCriterionButton: document.getElementById('add-new-criterion-button'),
                    editCriterionForm: document.getElementById('edit-criterion-form'),
                    criterionFormTitle: document.getElementById('criterion-form-title'),
                    editingCriterionIdInput: document.getElementById('editing-criterion-id'),
                    criterionNameInput: document.getElementById('criterion-name-input'),
                    criterionDefaultScoreInput: document.getElementById('criterion-default-score-input'),
                    criterionDefaultWeightInput: document.getElementById('criterion-default-weight-input'),
                    criterionDescriptionInput: document.getElementById('criterion-description-input'),
                    cancelCriterionEditButton: document.getElementById('cancel-criterion-edit-button'),
                    saveCriterionButton: document.getElementById('save-criterion-button')
                };
            }

            // --- 初始化與事件監聽 ---
            function initialize() {
                initializeDomElements();
                loadCustomIdealityCriteria(); // 載入或初始化自訂評估準則
                populateSelects(); // 填充下拉選單
                setupEventListeners(); // 設定所有事件監聽器
                if (domElements.scalableContentWrapper) {
                     // 監聽可縮放內容區域的大小變化，以重新繪製連接線
                     new ResizeObserver(() => drawAllSvgConnectors()).observe(domElements.scalableContentWrapper);
                }
                if (domElements.toolButtonsContainer) { domElements.toolButtonsContainer.style.display = 'flex'; }
                applyZoom(1.0, true); // 初始化縮放級別
                updateButtonStates(); // 更新按鈕狀態
                setupDashboardMenu(); // 設定儀表板選單行為
            }

            // 填充 TRIZ 參數和發明原理的下拉選單
            function populateSelects() {
                populateSelect(domElements.improvingParameterSelect, trizMatrix.getParameters(), true);
                populateSelect(domElements.worseningParameterSelect, trizMatrix.getParameters(), true);
                populateSelect(domElements.solutionPrincipleSelect, trizMatrix.getInventivePrinciplesNames(), false);
            }

            // 設定所有主要的事件監聽器
            function setupEventListeners() {
                domElements.setProblemButton.addEventListener('click', handleSetInitialProblem);
                domElements.problemInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') handleSetInitialProblem(); });

                // 檔案選單的顯示/隱藏
                domElements.sidebarFileMenuTrigger.addEventListener('click', (event) => {
                    event.stopPropagation();
                    const isDisplayed = domElements.fileDropdownContent.style.display === 'block';
                    domElements.fileDropdownContent.style.display = isDisplayed ? 'none' : 'block';
                    if (!isDisplayed) { updateButtonStates(); }
                });

                // 檔案操作按鈕
                domElements.saveDiagramButton.addEventListener('click', () => { handleSaveToLocalStorage(); domElements.fileDropdownContent.style.display = 'none'; });
                domElements.loadDiagramButton.addEventListener('click', () => { handleLoadFromLocalStorage(); domElements.fileDropdownContent.style.display = 'none'; });
                domElements.saveToFileButton.addEventListener('click', () => { handleSaveToFile(); domElements.fileDropdownContent.style.display = 'none'; });
                domElements.loadFromFileLabel.addEventListener('click', () => { domElements.fileInputForLoad.click(); });
                domElements.fileInputForLoad.addEventListener('change', (event) => { handleLoadFromFile(event); domElements.fileDropdownContent.style.display = 'none'; });

                // 撤銷/重做按鈕
                domElements.undoButton.addEventListener('click', handleUndo);
                domElements.redoButton.addEventListener('click', handleRedo);

                // 縮放控制按鈕
                domElements.zoomInButton.addEventListener('click', () => applyZoom(currentZoom + ZOOM_STEP));
                domElements.zoomOutButton.addEventListener('click', () => applyZoom(currentZoom - ZOOM_STEP));
                domElements.resetZoomButton.addEventListener('click', () => applyZoom(1.0));

                // 創意景觀圖更新按鈕
                domElements.updateIdeasLandscapeChartButton.addEventListener('click', renderIdeasLandscapeChart);

                // AND 輸入源模態視窗按鈕
                domElements.saveAndSourcesButton.addEventListener('click', handleSaveAndSources);
                domElements.cancelAndSourcesButton.addEventListener('click', () => { domElements.andSourceModal.style.display = 'none'; currentAndTargetNodeId = null; });

                // 效果參數模態視窗按鈕
                domElements.saveEffectParametersButton.addEventListener('click', handleSaveEffectParameters);
                domElements.cancelEffectParametersButton.addEventListener('click', () => { domElements.effectParameterModal.style.display = 'none'; currentParameterTargetNodeId = null; });

                // ABC 篩選按鈕
                domElements.abcCauseFilterControls.querySelectorAll('button[data-filter-type="cause"]').forEach(button => {
                    button.addEventListener('click', (event) => { applyAbcCauseFilter(event.target.dataset.filter); });
                });
                domElements.abcSolutionFilterControls.querySelectorAll('button[data-filter-type="solution"]').forEach(button => {
                    button.addEventListener('click', (event) => { applyAbcSolutionFilter(event.target.dataset.filter); });
                });

                // TRIZ 解決方案模態視窗按鈕
                document.getElementById('close-triz-modal-button').addEventListener('click', closeTrizSolutionModal);
                domElements.improvingParameterSelect.addEventListener('change', handleSaveTrizParameters);
                domElements.worseningParameterSelect.addEventListener('change', handleSaveTrizParameters);
                domElements.addNewSolutionEntryButton.addEventListener('click', () => showEditSolutionEntry(null));
                domElements.saveSolutionEntryButton.addEventListener('click', handleSaveSolutionEntry);
                domElements.cancelEditSolutionButton.addEventListener('click', () => {
                    domElements.editSolutionEntryContainer.style.display = 'none';
                    domElements.editingSolutionIdInput.value = '';
                });

                // 理想性評估模態視窗按鈕
                domElements.saveIdealityAssessmentButton.addEventListener('click', handleSaveIdealityAssessment);
                domElements.cancelIdealityAssessmentButton.addEventListener('click', closeIdealityAssessmentModal);
                domElements.resetIdealityWeightsButton.addEventListener('click', resetIdealityWeights);

                // 點擊視窗外部關閉檔案選單
                window.addEventListener('click', (event) => {
                    if (domElements.fileDropdownContent && domElements.sidebarFileMenuTrigger &&
                        !domElements.sidebarFileMenuTrigger.contains(event.target) &&
                        !domElements.fileDropdownContent.contains(event.target)) {
                        domElements.fileDropdownContent.style.display = 'none';
                    }
                });

                // 設定模態視窗按鈕
                domElements.menuItemSettings.addEventListener('click', (e) => { e.preventDefault(); openSettingsModal(); });
                domElements.closeSettingsModalButton.addEventListener('click', closeSettingsModal);
                domElements.addNewCriterionButton.addEventListener('click', () => showEditCriterionForm(null));
                domElements.saveCriterionButton.addEventListener('click', handleSaveCriterion);
                domElements.cancelCriterionEditButton.addEventListener('click', hideEditCriterionForm);
            }

            // --- 儀表板選單邏輯 ---
            function setupDashboardMenu() {
                // 手機版選單開關
                domElements.mobileMenuButton.addEventListener('click', () => {
                    domElements.dashboardMenu.classList.toggle('-translate-x-full');
                    const icon = domElements.mobileMenuButton.querySelector('i');
                    if (domElements.dashboardMenu.classList.contains('-translate-x-full')) {
                        icon.classList.remove('fa-times');
                        icon.classList.add('fa-bars');
                        domElements.mainContentArea.classList.remove('md:ml-0');
                        domElements.mainContentArea.classList.add('md:ml-64');
                    } else {
                        icon.classList.remove('fa-bars');
                        icon.classList.add('fa-times');
                        domElements.mainContentArea.classList.remove('md:ml-64');
                        domElements.mainContentArea.classList.add('md:ml-0');
                    }
                });

                // 導航選單項點擊事件
                document.querySelectorAll('#dashboard-menu .menu-item').forEach(item => {
                    if (item.id === 'sidebar-file-menu-trigger') return; // 排除檔案選單觸發器
                    item.addEventListener('click', function(event) {
                        if (this.classList.contains('disabled')) { event.preventDefault(); return; } // 如果禁用則不響應
                        // 移除所有選單項的 active 狀態
                        document.querySelectorAll('#dashboard-menu .menu-item').forEach(i => {
                            if (i.id !== 'sidebar-file-menu-trigger') i.classList.remove('active');
                        });
                        // 為當前點擊的選單項添加 active 狀態
                        if (this.id !== 'sidebar-file-menu-trigger') this.classList.add('active');

                        const targetId = this.getAttribute('href');
                        // 如果有目標 ID 且是錨點連結，則平滑滾動到對應區塊
                        if (targetId && targetId.startsWith('#') && targetId.length > 1) {
                            event.preventDefault();
                            document.querySelector(targetId).scrollIntoView({ behavior: 'smooth' });
                        } else if (targetId === '#') { event.preventDefault(); } // 如果只是 # 則阻止預設行為

                        // 在手機尺寸下，點擊選單項後自動關閉選單
                        if (window.innerWidth < 768) {
                            domElements.dashboardMenu.classList.add('-translate-x-full');
                            domElements.mobileMenuButton.querySelector('i').classList.remove('fa-times');
                            domElements.mobileMenuButton.querySelector('i').classList.add('fa-bars');
                            domElements.mainContentArea.classList.add('md:ml-64');
                        }
                    });
                });

                // 特定功能選單項的點擊事件
                domElements.menuItemToggleView.addEventListener('click', (e) => { e.preventDefault(); if (!domElements.menuItemToggleView.classList.contains('disabled')) handleToggleFinalizeView(); });
                domElements.menuItemAutoAdjust.addEventListener('click', (e) => { e.preventDefault(); if (!domElements.menuItemAutoAdjust.classList.contains('disabled')) alert('自動調整節點功能尚待開發。'); });
                domElements.menuItemExportPng.addEventListener('click', (e) => { e.preventDefault(); if (!domElements.menuItemExportPng.classList.contains('disabled')) exportDiagramAsPNG(); });

                domElements.menuItemCauseEffectTable.addEventListener('click', (e) => { if (!domElements.menuItemCauseEffectTable.classList.contains('disabled')) handleToggleCauseEffectTable(true); });
                domElements.menuItemSolutionTable.addEventListener('click', (e) => { if (!domElements.menuItemSolutionTable.classList.contains('disabled')) handleToggleSolutionTable(true); });
                domElements.menuItemIdeasLandscape.addEventListener('click', (e) => { if (!domElements.menuItemIdeasLandscape.classList.contains('disabled')) handleToggleIdeasLandscape(true); });
            }

            // --- 圖表互動與縮放 ---
            /**
             * 應用新的縮放級別到圖表。
             * @param {number} newZoomLevel - 新的縮放比例。
             * @param {boolean} avoidRedraw - 如果為 true，則不重新繪製 SVG 連接線。
             */
            function applyZoom(newZoomLevel, avoidRedraw = false) {
                currentZoom = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, newZoomLevel));
                domElements.scalableContentWrapper.style.transform = `scale(${currentZoom})`;
                domElements.zoomLevelDisplay.textContent = `${Math.round(currentZoom * 100)}%`;
                if (!avoidRedraw && rcaData) { requestAnimationFrame(() => drawAllSvgConnectors()); }
                updateButtonStates();
            }

            // --- UI 狀態管理 ---
            // 更新所有可交互按鈕的啟用/禁用狀態
            function updateButtonStates() {
                const noData = !rcaData;
                const noLocalStorageData = !localStorage.getItem('rcaDiagramData');

                domElements.undoButton.disabled = historyIndex <= 0;
                domElements.redoButton.disabled = historyIndex >= historyStack.length - 1;
                domElements.saveDiagramButton.disabled = noData;
                domElements.loadDiagramButton.disabled = noLocalStorageData;
                domElements.saveToFileButton.disabled = noData;

                domElements.zoomInButton.disabled = currentZoom >= MAX_ZOOM;
                domElements.zoomOutButton.disabled = currentZoom <= MIN_ZOOM;
                domElements.resetZoomButton.disabled = currentZoom === 1.0;
                domElements.updateIdeasLandscapeChartButton.disabled = noData;

                // 禁用或啟用儀表板中的特定選單項
                [domElements.menuItemToggleView, domElements.menuItemAutoAdjust, domElements.menuItemExportPng,
                 domElements.menuItemCauseEffectTable, domElements.menuItemSolutionTable, domElements.menuItemIdeasLandscape]
                 .forEach(item => { if (item) item.classList.toggle('disabled', noData); });

                // 更新原因 ABC 篩選按鈕的 active 狀態和禁用狀態
                domElements.abcCauseFilterControls.querySelectorAll('button[data-filter-type="cause"]').forEach(button => {
                    button.classList.toggle('active', button.dataset.filter === currentAbcCauseFilter);
                    button.disabled = noData;
                });
                // 更新方案 ABC 篩選按鈕的 active 狀態和禁用狀態
                domElements.abcSolutionFilterControls.querySelectorAll('button[data-filter-type="solution"]').forEach(button => {
                    button.classList.toggle('active', button.dataset.filter === currentAbcSolutionFilter);
                    button.disabled = noData;
                });
            }

            // --- 歷史紀錄管理 (Undo/Redo) ---
            /**
             * 將當前圖表狀態推送到歷史堆疊。
             * @param {object|null} currentState - 要儲存的當前 RCA 數據。
             * @param {boolean} clearRedoStack - 是否清空重做堆疊。
             */
            function pushStateToHistory(currentState, clearRedoStack = true) {
                // 處理初始空狀態或清空操作
                if ((currentState === null && historyStack.length === 0 && historyIndex === -1 && !rcaData) ||
                    (currentState === null && rcaData === null && historyStack.length > 0)) { /* initial empty state or clearing */ }
                else if (!currentState && rcaData) { updateButtonStates(); return; } // 如果沒有新狀態但有現有數據，則只更新按鈕狀態

                const stateCopy = deepCopy(currentState);
                if (clearRedoStack) { historyStack = historyStack.slice(0, historyIndex + 1); } // 清空重做堆疊
                historyStack.push({
                    data: stateCopy,
                    counter: nodeIdCounter,
                    zoom: currentZoom,
                    abcCauseFilter: currentAbcCauseFilter,
                    abcSolutionFilter: currentAbcSolutionFilter,
                    customIdealityCriteria: deepCopy(customIdealityCriteria)
                });
                historyIndex = historyStack.length - 1;
                // 限制歷史堆疊大小
                if (historyStack.length > MAX_HISTORY_STATES) { historyStack.shift(); historyIndex--; }
                updateButtonStates();
            }

            /**
             * 從歷史堆疊中恢復指定狀態。
             * @param {object} historyEntry - 要恢復的歷史狀態條目。
             * @returns {boolean} 恢復是否成功。
             */
            function restoreStateFromHistory(historyEntry) {
                if (!historyEntry || typeof historyEntry.data === 'undefined') { console.error("無法從歷史紀錄中檢索狀態。"); return false; }
                rcaData = deepCopy(historyEntry.data);
                nodeIdCounter = historyEntry.counter;
                recalculateNodeIdCounter(rcaData); // 確保節點計數器正確
                currentAbcCauseFilter = historyEntry.abcCauseFilter || 'all';
                currentAbcSolutionFilter = historyEntry.abcSolutionFilter || 'all';
                customIdealityCriteria = historyEntry.customIdealityCriteria ? deepCopy(historyEntry.customIdealityCriteria) : deepCopy(DEFAULT_IDEALITY_CRITERIA);

                // 根據是否有數據顯示或隱藏問題輸入區和圖表標題
                if (rcaData) {
                    domElements.problemInputArea.style.display = 'none';
                    domElements.diagramTitle.style.display = 'block';
                } else {
                    domElements.problemInputArea.style.display = 'flex';
                    domElements.diagramTitle.style.display = 'none';
                    domElements.diagramContainer.innerHTML = '';
                    domElements.svgLayer.innerHTML = '';
                }

                // 重新渲染所有相關 UI
                renderRcaDiagram();
                renderCauseEffectTable();
                renderSolutionTable();
                renderIdeasLandscapeChart();
                applyZoom(historyEntry.zoom, true);
                return true;
            }

            // 處理撤銷操作
            function handleUndo() { if (historyIndex > 0) { historyIndex--; if (!restoreStateFromHistory(historyStack[historyIndex])) historyIndex++; } updateButtonStates(); }
            // 處理重做操作
            function handleRedo() { if (historyIndex < historyStack.length - 1) { historyIndex++; if (!restoreStateFromHistory(historyStack[historyIndex])) historyIndex--; } updateButtonStates(); }

            // --- 資料載入與儲存 ---
            /**
             * 獲取預設的理想性評估結構。
             * @returns {object} 包含預設評估準則的對象。
             */
            function getDefaultIdealityAssessment() {
                const assessment = { criteria: [], weightedScore: null };
                customIdealityCriteria.forEach(crit => {
                    assessment.criteria.push({ id: crit.id, name: crit.name, score: crit.defaultScore, weight: crit.defaultWeight, description: crit.description });
                });
                return assessment;
            }

            /**
             * 處理從儲存載入的數據字串。
             * @param {string} dataString - 包含圖表數據的 JSON 字串。
             * @returns {boolean} 數據是否成功處理。
             */
            function processLoadedData(dataString) {
                try {
                    const parsedJson = JSON.parse(dataString);
                    // 驗證載入數據的基本結構
                    if (!parsedJson || typeof parsedJson !== 'object' || typeof parsedJson.diagramData === 'undefined') {
                        alert('載入失敗：檔案內容不是有效的物件格式或資料缺失。'); return false;
                    }
                    if (parsedJson.diagramData !== null && typeof parsedJson.diagramData !== 'object') {
                        alert('載入失敗：圖表資料格式不正確。'); return false;
                    }

                    rcaData = parsedJson.diagramData;
                    // 從載入的數據中獲取自訂準則，如果沒有則使用預設值
                    customIdealityCriteria = parsedJson.customIdealityCriteria ? deepCopy(parsedJson.customIdealityCriteria) : deepCopy(DEFAULT_IDEALITY_CRITERIA);
                    
                    // 更新 criterionIdCounter
                    criterionIdCounter = 0;
                    customIdealityCriteria.forEach(crit => {
                        const idNum = parseInt(crit.id.replace('crit-', ''));
                        if (!isNaN(idNum) && idNum > criterionIdCounter) { criterionIdCounter = idNum; }
                    });

                    // 合併新的預設準則，如果它們在載入的自訂準則中不存在
                    DEFAULT_IDEALITY_CRITERIA.forEach(defaultCrit => {
                        if (!customIdealityCriteria.some(c => c.id === defaultCrit.id)) {
                            customIdealityCriteria.push(deepCopy(defaultCrit));
                            const idNum = parseInt(defaultCrit.id.replace('crit-', ''));
                            if (!isNaN(idNum) && idNum > criterionIdCounter) { criterionIdCounter = idNum; }
                        }
                    });


                    if (rcaData) {
                        // 遞迴地遷移節點數據，確保所有節點都有新屬性並更新解決方案結構
                        function migrateNodeDataRecursive(node) {
                            if (!node) return;
                            // 確保所有節點都有這些屬性以保持一致性
                            if (typeof node.andSourceNodeIds === 'undefined') node.andSourceNodeIds = [];
                            if (typeof node.effectParameters === 'undefined') node.effectParameters = [];
                            if (typeof node.connectorLabelToParent === 'undefined') node.connectorLabelToParent = "";
                            if (typeof node.improvingParameter === 'undefined') node.improvingParameter = null;
                            if (typeof node.worseningParameter === 'undefined') node.worseningParameter = null;
                            if (typeof node.abcCategory === 'undefined') node.abcCategory = null;
                            if (typeof node.solutionsGenerated === 'undefined') node.solutionsGenerated = [];

                            // 將舊的 inventivePrinciples 遷移到新的 solutionsGenerated 結構
                            if (node.inventivePrinciples && Array.isArray(node.inventivePrinciples)) {
                                node.inventivePrinciples.forEach(oldIp => {
                                    if (!node.solutionsGenerated.some(s => s.principleName === oldIp.name && s.description === oldIp.solution)) {
                                        node.solutionsGenerated.push({
                                            id: `sol-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`,
                                            principleName: oldIp.name, description: oldIp.solution,
                                            abcCategory: oldIp.abcCategory || null, timeRequired: oldIp.timeRequired || null,
                                            mcdmScore: oldIp.mcdmScore || null, cost: oldIp.cost || null,
                                            idealityAssessment: oldIp.idealityAssessment || getDefaultIdealityAssessment()
                                        });
                                    }
                                });
                                delete node.inventivePrinciples; // 移除舊屬性
                            }

                            // 確保 solutionsGenerated 條目具有所有必要屬性並更新理想性評估
                            if(node.solutionsGenerated) {
                                node.solutionsGenerated.forEach(sol => {
                                    if (typeof sol.timeRequired === 'undefined') sol.timeRequired = null;
                                    if (typeof sol.mcdmScore === 'undefined') sol.mcdmScore = null;
                                    if (typeof sol.cost === 'undefined') sol.cost = null;
                                    // 如果 idealityAssessment 不存在或格式不正確，則重新生成預設值
                                    if (typeof sol.idealityAssessment === 'undefined' || sol.idealityAssessment === null || !Array.isArray(sol.idealityAssessment.criteria)) {
                                        sol.idealityAssessment = getDefaultIdealityAssessment();
                                        sol.mcdmScore = calculateWeightedScore(sol.idealityAssessment.criteria);
                                    } else {
                                        // 更新現有準則的名稱和描述，並添加新的預設準則
                                        const newCriteriaState = [];
                                        customIdealityCriteria.forEach(defaultCrit => {
                                            const existingCrit = sol.idealityAssessment.criteria.find(c => c.id === defaultCrit.id);
                                            newCriteriaState.push(existingCrit ? { ...existingCrit, name: defaultCrit.name, description: defaultCrit.description } : { ...defaultCrit });
                                        });
                                        // 過濾掉不再在 customIdealityCriteria 中的準則
                                        sol.idealityAssessment.criteria = newCriteriaState.filter(crit => customIdealityCriteria.some(c => c.id === crit.id));
                                        sol.idealityAssessment.weightedScore = calculateWeightedScore(sol.idealityAssessment.criteria);
                                        sol.mcdmScore = sol.idealityAssessment.weightedScore;
                                    }
                                });
                            }
                            if (node.children && Array.isArray(node.children)) { node.children.forEach(migrateNodeDataRecursive); }
                        }
                        migrateNodeDataRecursive(rcaData);
                    }

                    recalculateNodeIdCounter(rcaData); // 重新計算節點 ID 計數器
                    currentAbcCauseFilter = parsedJson.abcCauseFilter || parsedJson.abcFilter || 'all';
                    currentAbcSolutionFilter = parsedJson.abcSolutionFilter || 'all';
                    currentZoom = typeof parsedJson.zoomLevel === 'number' ? parsedJson.zoomLevel : 1.0;

                    historyStack = []; historyIndex = -1; pushStateToHistory(rcaData); // 清空並初始化歷史記錄

                    // 根據是否有數據顯示或隱藏問題輸入區和圖表標題
                    if (rcaData) { domElements.problemInputArea.style.display = 'none'; domElements.diagramTitle.style.display = 'block'; }
                    else { domElements.problemInputArea.style.display = 'flex'; domElements.diagramTitle.style.display = 'none'; domElements.diagramContainer.innerHTML = ''; domElements.svgLayer.innerHTML = ''; }

                    domElements.toolButtonsContainer.style.display = 'flex';
                    // 重新渲染所有 UI 組件
                    renderRcaDiagram(); renderCauseEffectTable(); renderSolutionTable(); renderIdeasLandscapeChart();
                    applyZoom(currentZoom, true);
                    alert('圖表進度已成功載入！'); return true;

                } catch (e) {
                    console.error("載入資料時發生錯誤:", e);
                    alert('載入失敗：檔案內容可能不是有效的JSON格式或已損毀。\n錯誤訊息: ' + e.message);
                    return false;
                }
            }

            // 將圖表數據儲存到瀏覽器本地儲存
            function handleSaveToLocalStorage() {
                if (rcaData || rcaData === null) {
                    try {
                        localStorage.setItem('rcaDiagramData', JSON.stringify({
                            diagramData: rcaData, counter: nodeIdCounter, zoomLevel: currentZoom,
                            abcCauseFilter: currentAbcCauseFilter, abcSolutionFilter: currentAbcSolutionFilter,
                            customIdealityCriteria: customIdealityCriteria
                        }));
                        alert('圖表進度已儲存至瀏覽器！');
                    } catch (e) { console.error("Error saving to localStorage:", e); alert('儲存失敗，可能是瀏覽器儲存空間已滿或功能受限。'); }
                } else { alert('沒有圖表資料可儲存。'); }
                updateButtonStates();
            }

            // 從瀏覽器本地儲存載入圖表數據
            function handleLoadFromLocalStorage() {
                const savedDataString = localStorage.getItem('rcaDiagramData');
                if (savedDataString) { processLoadedData(savedDataString); }
                else { alert('瀏覽器中沒有儲存的圖表進度。'); }
                updateButtonStates();
            }

            // 將圖表數據儲存為 JSON 檔案
            function handleSaveToFile() {
                if (rcaData || rcaData === null) {
                    const jsonData = JSON.stringify({
                        diagramData: rcaData, counter: nodeIdCounter, zoomLevel: currentZoom,
                        abcCauseFilter: currentAbcCauseFilter, abcSolutionFilter: currentAbcSolutionFilter,
                        customIdealityCriteria: customIdealityCriteria
                    }, null, 2);
                    const blob = new Blob([jsonData], { type: 'application/json' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a'); a.href = url;
                    a.download = `創新問題解決工具-資料-${new Date().toISOString().slice(0,10)}.json`;
                    document.body.appendChild(a); a.click();
                    document.body.removeChild(a); URL.revokeObjectURL(url);
                    alert('圖表資料已準備下載。');
                } else { alert('沒有圖表資料可儲存至檔案。'); }
            }

            // 從 JSON 檔案載入圖表數據
            function handleLoadFromFile(event) {
                const file = event.target.files[0];
                const inputElement = event.target; // 獲取 input 元素以便清空其值
                if (file) {
                    if (file.type === "application/json" || file.name.endsWith(".json")) {
                        const reader = new FileReader();
                        reader.onload = (e) => { processLoadedData(e.target.result); inputElement.value = ''; };
                        reader.onerror = (e) => { alert('讀取檔案時發生錯誤。'); console.error("FileReader error:", e); inputElement.value = ''; };
                        reader.readAsText(file);
                    } else { alert('載入失敗：請選擇一個有效的 .json 檔案。'); inputElement.value = ''; }
                }
                updateButtonStates();
            }

            // --- RCA 圖核心邏輯 ---
            /**
             * 遞迴遍歷 RCA 數據，重新計算最大的節點 ID。
             * 這在載入數據後確保 nodeIdCounter 從正確的值開始。
             * @param {object} currentData - 當前的 RCA 數據根節點。
             */
            function recalculateNodeIdCounter(currentData) {
                let maxId = 0;
                function findMaxIdRecursive(node) {
                    if (!node) return;
                    if (node.id && typeof node.id === 'string') {
                        const idNum = parseInt(node.id.replace('node-', ''));
                        if (!isNaN(idNum) && idNum > maxId) { maxId = idNum; }
                    }
                    if (node.children && Array.isArray(node.children)) { node.children.forEach(childNode => { if (childNode && typeof childNode === 'object') findMaxIdRecursive(childNode); }); }
                }
                if (currentData && typeof currentData === 'object') { findMaxIdRecursive(currentData); }
                nodeIdCounter = maxId;
            }

            // 設定初始問題節點
            function handleSetInitialProblem() {
                const problemText = domElements.problemInput.value.trim();
                if (!problemText) { alert('請輸入主要負面效果！'); return; }
                nodeIdCounter = 0; // 重置計數器
                rcaData = createNode(problemText, 'initial-problem', null); // 建立初始問題節點
                historyStack = []; historyIndex = -1; // 重置歷史記錄
                currentAbcCauseFilter = 'all'; currentAbcSolutionFilter = 'all'; // 重置篩選器
                pushStateToHistory(rcaData); // 將初始狀態推入歷史記錄
                isFinalizedView = false; // 確保在編輯模式
                domElements.problemInputArea.style.display = 'none'; // 隱藏問題輸入區
                domElements.diagramTitle.style.display = 'block'; // 顯示圖表標題
                domElements.toolButtonsContainer.style.display = 'flex';
                applyZoom(1.0, true); // 重置縮放
                renderRcaDiagram(); renderCauseEffectTable(); renderSolutionTable(); renderIdeasLandscapeChart(); // 渲染所有 UI
                updateButtonStates(); // 更新按鈕狀態
            }

            // 切換檢視模式/編輯模式
            function handleToggleFinalizeView() {
                isFinalizedView = !isFinalizedView;
                renderRcaDiagram(); // 重新渲染圖表以應用模式變化
                const menuItem = domElements.menuItemToggleView;
                const icon = menuItem.querySelector('i');
                icon.className = isFinalizedView ? 'fas fa-lock fa-fw mr-3' : 'fas fa-edit fa-fw mr-3';
                menuItem.innerHTML = `<i class="${icon.className}"></i> ${isFinalizedView ? '檢視模式 (已鎖定)' : '編輯模式'}`;
            }

            /**
             * 建立一個新的節點數據對象。
             * @param {string} text - 節點的文字內容。
             * @param {string} type - 節點類型 ('initial-problem', 'cause', 'positive-effect', 'negative-effect')。
             * @param {string|null} parentId - 父節點的 ID，如果沒有父節點則為 null。
             * @param {boolean} isNonChangeable - (僅限原因節點) 是否為不可變更的原因。
             * @returns {object} 新建立的節點數據對象。
             */
            function createNode(text, type, parentId, isNonChangeable = false) {
                nodeIdCounter++;
                const node = {
                    id: `node-${nodeIdCounter}`, text: text, type: type, parentId: parentId,
                    children: [], andSourceNodeIds: [], effectParameters: [],
                    improvingParameter: null, worseningParameter: null, solutionsGenerated: [],
                    abcCategory: null, // ABC 分類主要用於原因節點，但為了一致性，所有節點都初始化此屬性
                    connectorLabelToParent: ""
                };
                if (type === 'cause') node.isNonChangeable = isNonChangeable;
                return node;
            }

            // 渲染 RCA 圖表 (從根節點開始遞迴渲染)
            function renderRcaDiagram() {
                domElements.diagramContainer.innerHTML = '';
                if (rcaData) { domElements.diagramContainer.appendChild(createNodeElement(rcaData)); }
                requestAnimationFrame(() => drawAllSvgConnectors()); // 在下一幀繪製連接線
                updateButtonStates();
            }

            /**
             * 根據節點數據建立其 HTML 元素。
             * @param {object} nodeData - 要建立的節點數據。
             * @returns {HTMLElement} 建立的節點 HTML 元素。
             */
            function createNodeElement(nodeData) {
                const nodeWrapper = document.createElement('div');
                nodeWrapper.classList.add('rca-node-wrapper');

                const nodeDiv = document.createElement('div');
                nodeDiv.classList.add('rca-node', `rca-node-${nodeData.type}`);
                nodeDiv.id = nodeData.id;
                nodeDiv.dataset.nodeId = nodeData.id;

                // 處理原因節點的 ABC 分類視覺效果
                if (nodeData.type === 'cause') {
                    const isDimmed = (currentAbcCauseFilter === 'none' && (nodeData.abcCategory !== null && typeof nodeData.abcCategory !== 'undefined')) ||
                                     (currentAbcCauseFilter !== 'all' && currentAbcCauseFilter !== 'none' && nodeData.abcCategory !== currentAbcCauseFilter);
                    if (isDimmed) nodeDiv.classList.add('dimmed');
                }

                const contentDiv = document.createElement('div');
                contentDiv.classList.add('rca-node-content');

                const headerDiv = document.createElement('div');
                headerDiv.classList.add('rca-node-header');
                const textSpan = document.createElement('span');
                textSpan.classList.add('rca-node-text');
                textSpan.textContent = nodeData.text;
                headerDiv.appendChild(textSpan);

                // 顯示 ABC 標籤 (僅限原因節點)
                if (nodeData.type === 'cause' && nodeData.abcCategory) {
                    const abcBadge = document.createElement('span');
                    abcBadge.classList.add('abc-badge', `abc-badge-${nodeData.abcCategory}`);
                    abcBadge.textContent = nodeData.abcCategory;
                    nodeDiv.appendChild(abcBadge);
                }
                // 顯示 NC 標籤 (僅限原因節點)
                if (nodeData.type === 'cause' && nodeData.isNonChangeable) {
                    const ncBadge = document.createElement('span');
                    ncBadge.classList.add('node-badge');
                    ncBadge.textContent = 'NC';
                    headerDiv.appendChild(ncBadge);
                }
                contentDiv.appendChild(headerDiv);

                // 節點圖示 (根據類型和是否有矛盾子節點)
                const iconSpan = document.createElement('span');
                iconSpan.classList.add('rca-node-icon');
                if (nodeData.type === 'initial-problem') {
                    iconSpan.textContent = '(-)';
                } else if (['cause', 'positive-effect', 'negative-effect'].includes(nodeData.type)) {
                    const { hasPositiveChild, hasNegativeChild } = checkChildrenEffects(nodeData);
                    if (hasPositiveChild && hasNegativeChild) {
                        iconSpan.textContent = '+/-';
                        iconSpan.classList.add('contradictory');
                    } else {
                        iconSpan.style.display = 'none'; // 如果沒有矛盾則隱藏圖示
                    }
                } else if (nodeData.type === 'positive-effect') {
                    iconSpan.textContent = '(+)';
                } else if (nodeData.type === 'negative-effect') {
                    iconSpan.textContent = '(-)';
                } else {
                    iconSpan.style.display = 'none';
                }

                // 節點圖示背景顏色
                if (nodeData.type === 'initial-problem') iconSpan.style.backgroundColor = '#ef4444';
                else if (iconSpan.classList.contains('contradictory')) iconSpan.style.backgroundColor = '#8b5cf6';
                else if (nodeData.type === 'positive-effect') iconSpan.style.backgroundColor = '#2563eb';
                else if (nodeData.type === 'negative-effect') iconSpan.style.backgroundColor = '#f97316';
                nodeDiv.appendChild(iconSpan);

                // 顯示 TRIZ 衝突參數
                if ((nodeData.improvingParameter || nodeData.worseningParameter)) {
                    let paramsText = '';
                    if (nodeData.improvingParameter && nodeData.improvingParameter !== "未選擇") paramsText += `↑ ${nodeData.improvingParameter}`;
                    if (nodeData.worseningParameter && nodeData.worseningParameter !== "未選擇") paramsText += `${paramsText ? ' ' : ''}↓ ${nodeData.worseningParameter}`;
                    if (paramsText) {
                        const trizParamsDiv = document.createElement('div');
                        trizParamsDiv.classList.add('engineering-param-display');
                        trizParamsDiv.innerHTML = `<strong>衝突參數:</strong> ${paramsText}`;
                        contentDiv.appendChild(trizParamsDiv);
                    }
                }

                // 顯示效果參數
                if (nodeData.effectParameters && nodeData.effectParameters.length > 0) {
                    const paramsDiv = document.createElement('div');
                    paramsDiv.classList.add('selected-items-list');
                    paramsDiv.innerHTML = `<strong>效果參數:</strong> <ul>${nodeData.effectParameters.map(p => `<li>${p}</li>`).join('')}</ul>`;
                    contentDiv.appendChild(paramsDiv);
                }

                // 編輯模式下的動作按鈕
                if (!isFinalizedView) {
                    const actionsDiv = document.createElement('div');
                    actionsDiv.classList.add('rca-node-actions');

                    actionsDiv.appendChild(createActionButton('修訂此項', 'edit-node', () => promptEditNode(nodeData.id, contentDiv)));

                    if (nodeData.type === 'initial-problem') {
                        actionsDiv.appendChild(createActionButton('新增原因', 'add-cause', () => promptAddNode(nodeData.id, contentDiv, 'cause', '輸入原因描述', '與父節點關係描述 (選填)')));
                    } else if (nodeData.type === 'cause') {
                        actionsDiv.appendChild(createActionButton('新增子原因', 'add-cause', () => promptAddNode(nodeData.id, contentDiv, 'cause', '輸入子原因描述', '與父節點關係描述 (選填)')));
                        actionsDiv.appendChild(createActionButton('(+) 正面效果', 'add-positive', () => promptAddNode(nodeData.id, contentDiv, 'positive-effect', '輸入此原因帶來的正面效果', '與父節點關係描述 (選填)')));
                        actionsDiv.appendChild(createActionButton('(-) 負面效果', 'add-negative', () => promptAddNode(nodeData.id, contentDiv, 'negative-effect', '輸入此原因導致的負面效果', '與父節點關係描述 (選填)')));
                        actionsDiv.appendChild(createActionButton(nodeData.isNonChangeable ? '取消NC標記' : '設為NC', 'toggle-nc', () => toggleNonChangeable(nodeData.id)));
                        actionsDiv.appendChild(createActionButton('設定ABC分類', 'set-abc', () => openAbcCauseCategoryModal(nodeData.id)));
                    } else if (nodeData.type === 'positive-effect' || nodeData.type === 'negative-effect') {
                        actionsDiv.appendChild(createActionButton('(+) 新增正面子效果', 'add-positive', () => promptAddNode(nodeData.id, contentDiv, 'positive-effect', '輸入正面子效果描述', '與父節點關係描述 (選填)')));
                        actionsDiv.appendChild(createActionButton('(-) 新增負面子效果', 'add-negative', () => promptAddNode(nodeData.id, contentDiv, 'negative-effect', '輸入負面子效果描述', '與父節點關係描述 (選填)')));
                        actionsDiv.appendChild(createActionButton('設定效果參數', 'set-parameters', () => openEffectParameterModal(nodeData.id)));
                        actionsDiv.appendChild(createActionButton('設定AND輸入源', 'set-and-sources', () => openAndSourceModal(nodeData.id)));
                    }

                    // 任何有矛盾子節點的節點都可以設定衝突參數/方案
                    const { hasPositiveChild, hasNegativeChild } = checkChildrenEffects(nodeData);
                    if (hasPositiveChild && hasNegativeChild) {
                        actionsDiv.appendChild(createActionButton('設定衝突參數/方案', 'set-triz', () => openTrizSolutionModal(nodeData.id)));
                    }

                    // 移除按鈕 (不允許移除初始問題節點)
                    if (nodeData.id !== rcaData.id) {
                        actionsDiv.appendChild(createActionButton('移除此項', 'remove-button', () => removeNode(nodeData.id)));
                    }
                    
                    contentDiv.appendChild(actionsDiv);
                    const inputContainer = document.createElement('div');
                    inputContainer.classList.add('input-group-container');
                    contentDiv.appendChild(inputContainer);
                }

                nodeDiv.appendChild(contentDiv);
                nodeWrapper.appendChild(nodeDiv);

                // 遞迴渲染子節點
                if (nodeData.children && Array.isArray(nodeData.children) && nodeData.children.length > 0) {
                    const childrenContainer = document.createElement('div');
                    childrenContainer.classList.add('rca-children-container');
                    nodeData.children.forEach(childNode => {
                        if (childNode && typeof childNode === 'object') childrenContainer.appendChild(createNodeElement(childNode));
                    });
                    nodeWrapper.appendChild(childrenContainer);
                }
                return nodeWrapper;
            }

            /**
             * 彈出模態視窗以編輯節點文字和連接線標籤。
             * @param {string} nodeId - 要編輯的節點 ID。
             * @param {HTMLElement} parentNodeContentDiv - 節點內容的 DOM 元素。
             */
            function promptEditNode(nodeId, parentNodeContentDiv) {
                if (isFinalizedView) { alert('目前處於檢視模式，請切換到編輯模式以修改節點。'); return; }
                const nodeToEdit = findNodeById(rcaData, nodeId);
                if (!nodeToEdit) return;

                const inputContainer = parentNodeContentDiv.querySelector('.input-group-container');
                if (!inputContainer) { console.error("Input container not found for node:", nodeId); return; }

                // 移除所有現有的輸入組件
                document.querySelectorAll('.input-group').forEach(ig => ig.remove());
                inputContainer.innerHTML = '';

                const inputGroup = document.createElement('div');
                inputGroup.classList.add('input-group');

                const nodeInput = document.createElement('input');
                nodeInput.type = 'text';
                nodeInput.value = nodeToEdit.text;
                nodeInput.classList.add('input-field');
                inputGroup.appendChild(nodeInput);

                let connectorLabelInput;
                if (nodeToEdit.parentId) {
                    connectorLabelInput = document.createElement('input');
                    connectorLabelInput.type = 'text';
                    connectorLabelInput.value = nodeToEdit.connectorLabelToParent || "";
                    connectorLabelInput.placeholder = "與父節點關係描述 (選填)";
                    connectorLabelInput.classList.add('input-field', 'mt-2');
                    inputGroup.appendChild(connectorLabelInput);
                }

                const saveEditButton = createActionButton('儲存修訂', 'save-edit-button w-full mt-2', () => {
                    const newText = nodeInput.value.trim();
                    if (newText) {
                        nodeToEdit.text = newText;
                        if (nodeToEdit.parentId && connectorLabelInput) { nodeToEdit.connectorLabelToParent = connectorLabelInput.value.trim(); }
                        pushStateToHistory(rcaData);
                        renderRcaDiagram();
                        renderCauseEffectTable();
                        renderSolutionTable();
                        inputContainer.innerHTML = '';
                    } else { alert('描述不能為空！'); }
                });
                nodeInput.addEventListener('keypress', (event) => { if (event.key === 'Enter') saveEditButton.click(); });
                if (connectorLabelInput) connectorLabelInput.addEventListener('keypress', (event) => { if (event.key === 'Enter') saveEditButton.click(); });

                const cancelButton = createActionButton('取消修訂', 'bg-gray-400 hover:bg-gray-500 w-full mt-1', () => { inputContainer.innerHTML = ''; });

                inputGroup.appendChild(saveEditButton);
                inputGroup.appendChild(cancelButton);
                inputContainer.appendChild(inputGroup);
                nodeInput.focus();
                nodeInput.select();
            }

            /**
             * 彈出模態視窗以添加新的子節點。
             * @param {string} parentId - 父節點的 ID。
             * @param {HTMLElement} parentNodeContentDiv - 父節點內容的 DOM 元素。
             * @param {string} nodeTypeToAdd - 要添加的子節點類型。
             * @param {string} placeholderText - 輸入框的佔位符文本。
             * @param {string} connectorLabelPlaceholderText - 連接線標籤輸入框的佔位符文本。
             */
            function promptAddNode(parentId, parentNodeContentDiv, nodeTypeToAdd, placeholderText, connectorLabelPlaceholderText = "") {
                if (isFinalizedView) return;
                const inputContainer = parentNodeContentDiv.querySelector('.input-group-container');
                if (!inputContainer) return;

                // 移除所有現有的輸入組件
                inputContainer.innerHTML = '';
                document.querySelectorAll('.input-group').forEach(ig => ig.remove());

                const inputGroup = document.createElement('div');
                inputGroup.classList.add('input-group');

                const nodeInput = document.createElement('input');
                nodeInput.type = 'text';
                nodeInput.placeholder = placeholderText;
                nodeInput.classList.add('input-field');
                inputGroup.appendChild(nodeInput);

                const connectorLabelInput = document.createElement('input');
                connectorLabelInput.type = 'text';
                connectorLabelInput.value = connectorLabelPlaceholderText;
                connectorLabelInput.placeholder = connectorLabelPlaceholderText;
                connectorLabelInput.classList.add('input-field', 'mt-2');
                inputGroup.appendChild(connectorLabelInput);

                const saveButton = createActionButton('儲存', 'save-button w-full mt-2', () => {
                    const newText = nodeInput.value.trim();
                    const connectorLabel = connectorLabelInput.value.trim();
                    if (newText) {
                        addNodeToData(parentId, newText, nodeTypeToAdd, connectorLabel);
                        inputContainer.innerHTML = '';
                    } else { alert('描述不能為空！'); }
                });
                nodeInput.addEventListener('keypress', (event) => { if (event.key === 'Enter') saveButton.click(); });
                connectorLabelInput.addEventListener('keypress', (event) => { if (event.key === 'Enter') saveButton.click(); });

                const cancelButton = createActionButton('取消', 'bg-gray-400 hover:bg-gray-500 w-full mt-1', () => { inputContainer.innerHTML = ''; });

                inputGroup.appendChild(saveButton);
                inputGroup.appendChild(cancelButton);
                inputContainer.appendChild(inputGroup);
                nodeInput.focus();
            }

            /**
             * 將新節點添加到數據模型中。
             * @param {string} parentId - 父節點的 ID。
             * @param {string} nodeText - 新節點的文字內容。
             * @param {string} nodeType - 新節點的類型。
             * @param {string} connectorLabel - 連接線的標籤。
             */
            function addNodeToData(parentId, nodeText, nodeType, connectorLabel = "") {
                const parentNode = findNodeById(rcaData, parentId);
                if (parentNode) {
                    const newNode = createNode(nodeText, nodeType, parentId);
                    newNode.connectorLabelToParent = connectorLabel;
                    parentNode.children.push(newNode);
                    pushStateToHistory(rcaData);
                    renderRcaDiagram();
                    renderCauseEffectTable();
                    renderSolutionTable();
                }
            }

            /**
             * 從數據模型中移除節點。
             * @param {string} nodeIdToRemove - 要移除的節點 ID。
             */
            function removeNode(nodeIdToRemove) {
                if (isFinalizedView) return;
                if (rcaData && rcaData.id === nodeIdToRemove) { alert('不能移除主要問題根源節點！'); return; }

                let nodeRemoved = false;

                // 遞迴過濾函式，用於從樹中移除節點及其子節點
                function filterRecursive(node, idToRemove) {
                    if (!node) return null;
                    if (node.id === idToRemove) {
                        nodeRemoved = true;
                        // 如果被移除的節點是某個 AND 輸入源，則從所有相關節點中移除該引用
                        function removeAndSourceFromEntireTree(currentNodeData, removedId) {
                            if (!currentNodeData) return;
                            if (currentNodeData.andSourceNodeIds && currentNodeData.andSourceNodeIds.includes(removedId)) {
                                currentNodeData.andSourceNodeIds = currentNodeData.andSourceNodeIds.filter(srcId => srcId !== removedId);
                            }
                            if (currentNodeData.children && Array.isArray(currentNodeData.children)) {
                                currentNodeData.children.forEach(child => removeAndSourceFromEntireTree(child, removedId));
                            }
                        }
                        removeAndSourceFromEntireTree(rcaData, idToRemove);
                        return null; // 返回 null 表示移除此節點
                    }
                    if (node.children && Array.isArray(node.children)) {
                        // 遞迴處理子節點，並過濾掉已移除的子節點
                        node.children = node.children.map(child => filterRecursive(child, idToRemove)).filter(child => child !== null);
                    }
                    return node;
                }

                rcaData = filterRecursive(rcaData, nodeIdToRemove);

                if (nodeRemoved) { pushStateToHistory(rcaData); }

                // 如果所有節點都被移除，重置應用程式狀態
                if (!rcaData) {
                    domElements.problemInputArea.style.display = 'flex';
                    domElements.diagramTitle.style.display = 'none';
                    domElements.toolButtonsContainer.style.display = 'flex';
                    domElements.causeEffectTableSection.style.display = 'none';
                    domElements.solutionTableSection.style.display = 'none';
                    domElements.ideasLandscapeSection.style.display = 'none';
                    historyStack = [];
                    historyIndex = -1;
                    applyZoom(1.0);
                    currentAbcCauseFilter = 'all';
                    currentAbcSolutionFilter = 'all';
                }
                // 重新渲染所有相關 UI
                renderRcaDiagram();
                renderCauseEffectTable();
                renderSolutionTable();
                renderIdeasLandscapeChart();
                updateButtonStates();
            }

            // --- 模態視窗處理 ---
            /**
             * 開啟 AND 輸入源設定模態視窗。
             * @param {string} targetNodeId - 目標效果節點的 ID。
             */
            function openAndSourceModal(targetNodeId) {
                if (isFinalizedView) return;
                currentAndTargetNodeId = targetNodeId;
                const targetNode = findNodeById(rcaData, targetNodeId);
                // 僅允許為效果節點設定 AND 輸入源
                if (!targetNode || (targetNode.type !== 'positive-effect' && targetNode.type !== 'negative-effect')) { alert('只能為「效果」節點設定 AND 輸入源。'); return; }

                domElements.andSourceModalNodeText.textContent = `為效果「${targetNode.text.substring(0,30)}...」設定 AND 輸入源:`;
                domElements.andSourceOptionsContainer.innerHTML = '';

                const potentialSources = [];
                // 收集所有原因和初始問題節點作為潛在的 AND 輸入源
                function collectPotentialSourcesRecursive(node) {
                    if (!node) return;
                    if (node.id !== targetNodeId && (node.type === 'cause' || node.type === 'initial-problem')) {
                        potentialSources.push({ id: node.id, text: node.text });
                    }
                    if (node.children) node.children.forEach(collectPotentialSourcesRecursive);
                }
                collectPotentialSourcesRecursive(rcaData);

                if (potentialSources.length === 0) {
                    domElements.andSourceOptionsContainer.innerHTML = '<p class="text-sm text-gray-500">沒有可用的 AND 輸入源節點 (原因或主要問題)。</p>';
                } else {
                    potentialSources.forEach(source => {
                        const label = document.createElement('label');
                        label.className = 'block text-sm text-gray-700 mb-1';
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.value = source.id;
                        checkbox.name = 'andSourceOption';
                        checkbox.className = 'mr-2 rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50';
                        if (targetNode.andSourceNodeIds && targetNode.andSourceNodeIds.includes(source.id)) { checkbox.checked = true; }
                        label.appendChild(checkbox);
                        label.appendChild(document.createTextNode(`${source.text.substring(0,40)}... (ID: ${source.id})`));
                        domElements.andSourceOptionsContainer.appendChild(label);
                    });
                }
                domElements.andSourceModal.style.display = 'flex';
            }

            // 處理保存 AND 輸入源設定
            function handleSaveAndSources() {
                if (!currentAndTargetNodeId) return;
                const targetNode = findNodeById(rcaData, currentAndTargetNodeId);
                if (!targetNode) return;

                const selectedSources = [];
                domElements.andSourceOptionsContainer.querySelectorAll('input[name="andSourceOption"]:checked').forEach(checkbox => { selectedSources.push(checkbox.value); });
                targetNode.andSourceNodeIds = selectedSources;

                pushStateToHistory(rcaData);
                renderRcaDiagram(); // 重新渲染圖表以更新連接線
                domElements.andSourceModal.style.display = 'none';
                currentAndTargetNodeId = null;
            }

            /**
             * 開啟效果參數設定模態視窗。
             * @param {string} targetNodeId - 目標效果節點的 ID。
             */
            function openEffectParameterModal(targetNodeId) {
                if (isFinalizedView) return;
                currentParameterTargetNodeId = targetNodeId;
                const targetNode = findNodeById(rcaData, targetNodeId);
                // 僅允許為正面或負面效果節點設定效果參數
                if (!targetNode || (targetNode.type !== 'positive-effect' && targetNode.type !== 'negative-effect')) { alert('只能為正面或負面效果節點設定效果參數。'); return; }

                domElements.effectParameterModalNodeText.textContent = `為效果「${targetNode.text.substring(0,30)}...」設定參數:`;
                domElements.effectParameterOptionsContainer.innerHTML = '';

                // 遍歷所有效果參數類別並創建複選框
                Object.entries(EFFECT_PARAMETERS).forEach(([category, params]) => {
                    const categoryTitle = document.createElement('h4');
                    categoryTitle.textContent = category;
                    domElements.effectParameterOptionsContainer.appendChild(categoryTitle);
                    params.forEach(param => {
                        const label = document.createElement('label');
                        label.className = 'block text-sm text-gray-700 mb-1 items-center';
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.value = param;
                        checkbox.name = 'effectParamOption';
                        checkbox.className = 'mr-2 rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50 align-middle';
                        if (targetNode.effectParameters && targetNode.effectParameters.includes(param)) { checkbox.checked = true; }
                        label.appendChild(checkbox);
                        label.appendChild(document.createTextNode(param));
                        domElements.effectParameterOptionsContainer.appendChild(label);
                    });
                });
                domElements.effectParameterModal.style.display = 'flex';
            }

            // 處理保存效果參數設定
            function handleSaveEffectParameters() {
                if (!currentParameterTargetNodeId) return;
                const targetNode = findNodeById(rcaData, currentParameterTargetNodeId);
                if (!targetNode) return;

                const selectedParams = [];
                domElements.effectParameterOptionsContainer.querySelectorAll('input[name="effectParamOption"]:checked').forEach(checkbox => { selectedParams.push(checkbox.value); });
                targetNode.effectParameters = selectedParams;

                pushStateToHistory(rcaData);
                renderRcaDiagram(); // 重新渲染圖表以更新節點顯示
                renderCauseEffectTable(); // 重新渲染表格
                domElements.effectParameterModal.style.display = 'none';
                currentParameterTargetNodeId = null;
            }

            // --- ABC 分類管理 ---
            /**
             * 開啟原因節點的 ABC 分類模態視窗。
             * @param {string} nodeId - 要設定 ABC 分類的節點 ID。
             */
            function openAbcCauseCategoryModal(nodeId) {
                if (isFinalizedView) return;
                currentAbcCauseTargetNodeId = nodeId;
                const node = findNodeById(rcaData, nodeId);
                // 僅允許為原因節點設定 ABC 分類
                if (!node || node.type !== 'cause') { alert('只能為原因節點設定ABC分類。'); return; }

                const modal = domElements.abcCategoryModal;
                // 如果模態視窗內容尚未生成，則生成它
                if (!modal.innerHTML.trim()) {
                    modal.innerHTML = `
                        <div class="modal-content mx-auto p-5 border w-11/12 md:w-1/2 lg:w-1/3 shadow-lg rounded-md bg-white">
                            <button class="modal-close-button" onclick="App.domElements.abcCategoryModal.style.display='none'; App.currentAbcCauseTargetNodeId = null;">&times;</button>
                            <div class="mt-3">
                                <h3 class="text-lg leading-6 font-medium text-gray-900 text-center" id="abc-modal-title">設定原因ABC分類</h3>
                                <p class="text-sm text-gray-600 mb-3 text-center" id="abc-modal-node-text"></p>
                                <div class="flex justify-around">
                                    <button data-abc-cause="A" class="action-button bg-red-500 hover:bg-red-600 px-6 py-2">A 類</button>
                                    <button data-abc-cause="B" class="action-button bg-orange-500 hover:bg-orange-600 px-6 py-2">B 類</button>
                                    <button data-abc-cause="C" class="action-button bg-amber-500 hover:bg-amber-600 px-6 py-2">C 類</button>
                                </div>
                                <div class="mt-4 text-center">
                                     <button data-abc-cause="null" class="action-button bg-gray-400 hover:bg-gray-500 px-6 py-2">清除分類</button>
                                </div>
                            </div>
                        </div>`;
                    // 為新生成的按鈕添加事件監聽器
                    modal.querySelectorAll('button[data-abc-cause]').forEach(button => {
                        button.addEventListener('click', (event) => {
                            const category = event.target.dataset.abcCause === 'null' ? null : event.target.dataset.abcCause;
                            handleSaveAbcCauseCategory(category);
                            modal.style.display = 'none';
                        });
                    });
                }
                // 更新模態視窗中的節點文字
                modal.querySelector('#abc-modal-node-text').textContent = `節點：${node.text.substring(0,30)}${node.text.length > 30 ? '...' : ''}`;
                // 標記當前選中的分類
                modal.querySelectorAll('button[data-abc-cause]').forEach(btn => {
                    btn.classList.remove('ring-2', 'ring-offset-2', 'ring-blue-500');
                    if (btn.dataset.abcCause === (node.abcCategory || 'null')) { btn.classList.add('ring-2', 'ring-offset-2', 'ring-blue-500'); }
                });
                modal.style.display = 'flex';
            }

            /**
             * 保存原因節點的 ABC 分類。
             * @param {string|null} category - 要保存的 ABC 分類 ('A', 'B', 'C' 或 null)。
             */
            function handleSaveAbcCauseCategory(category) {
                if (!currentAbcCauseTargetNodeId) return;
                const node = findNodeById(rcaData, currentAbcCauseTargetNodeId);
                if (node && node.type === 'cause') { // 僅保存原因節點的 ABC 分類
                    node.abcCategory = category;
                    pushStateToHistory(rcaData);
                    renderRcaDiagram(); // 重新渲染圖表以更新節點上的 ABC 標籤
                    renderCauseEffectTable(); // 重新渲染表格
                    currentAbcCauseTargetNodeId = null;
                }
            }

            /**
             * 應用原因 ABC 篩選器。
             * @param {string} filterType - 篩選類型 ('all', 'A', 'B', 'C', 'none')。
             */
            function applyAbcCauseFilter(filterType) {
                currentAbcCauseFilter = filterType;
                pushStateToHistory(rcaData); // 儲存篩選狀態到歷史記錄
                renderRcaDiagram(); // 重新渲染圖表以應用篩選
                updateButtonStates(); // 更新篩選按鈕的 active 狀態
            }

            /**
             * 應用解決方案 ABC 篩選器。
             * @param {string} filterType - 篩選類型 ('all', 'A', 'B', 'C', 'none')。
             */
            function applyAbcSolutionFilter(filterType) {
                currentAbcSolutionFilter = filterType;
                renderSolutionTable(); // 重新渲染解決方案表格以應用篩選
                domElements.abcSolutionFilterControls.querySelectorAll('button[data-filter-type="solution"]').forEach(button => {
                    button.classList.toggle('active', button.dataset.filter === currentAbcSolutionFilter);
                });
            }

            // --- TRIZ 解決方案管理 ---
            /**
             * 開啟 TRIZ 解決方案模態視窗。
             * @param {string} contradictionNodeId - 具有矛盾子節點的節點 ID。
             */
            function openTrizSolutionModal(contradictionNodeId) {
                if (isFinalizedView) return;
                currentTrizContradictionNodeId = contradictionNodeId;
                const contradictionNode = findNodeById(rcaData, currentTrizContradictionNodeId);
                // 允許初始問題、原因、正面效果、負面效果節點作為衝突節點
                if (!contradictionNode || !['initial-problem', 'cause', 'positive-effect', 'negative-effect'].includes(contradictionNode.type)) {
                    alert('此節點類型不支援設定衝突參數/方案。');
                    return;
                }

                domElements.trizModalContradictionNodeText.textContent = `衝突節點: ${contradictionNode.text.substring(0,50)}${contradictionNode.text.length > 50 ? '...' : ''}`;
                domElements.improvingParameterSelect.value = contradictionNode.improvingParameter || "";
                domElements.worseningParameterSelect.value = contradictionNode.worseningParameter || "";

                updateSuggestedPrinciples(); // 更新建議發明原理
                renderSolutionsListForContradictionNode(contradictionNodeId); // 渲染該衝突節點的解決方案列表
                domElements.editSolutionEntryContainer.style.display = 'none'; // 隱藏編輯解決方案表單
                domElements.trizSolutionModal.style.display = 'flex';
            }

            // 根據選定的改善和惡化參數更新建議的發明原理列表
            function updateSuggestedPrinciples() {
                const improvingParam = domElements.improvingParameterSelect.value;
                const worseningParam = domElements.worseningParameterSelect.value;
                domElements.suggestedPrinciplesList.innerHTML = ''; // 清空現有列表

                if (improvingParam && worseningParam && improvingParam !== "未選擇" && worseningParam !== "未選擇") {
                    const principlesNames = trizMatrix.getRecommendedPrinciplesByName(improvingParam, worseningParam);
                    if (principlesNames && principlesNames.length > 0) {
                        domElements.suggestedPrinciplesContainer.style.display = 'block';
                        principlesNames.forEach((principleName) => {
                            const li = document.createElement('li');
                            li.textContent = principleName;
                            domElements.suggestedPrinciplesList.appendChild(li);
                        });
                    } else { domElements.suggestedPrinciplesContainer.style.display = 'none'; }
                } else { domElements.suggestedPrinciplesContainer.style.display = 'none'; }
            }

            // 關閉 TRIZ 解決方案模態視窗
            function closeTrizSolutionModal() {
                domElements.trizSolutionModal.style.display = 'none';
                currentTrizContradictionNodeId = null;
                renderRcaDiagram(); // 重新渲染圖表以更新節點圖示（如果衝突參數已設定）
                renderSolutionTable(); // 重新渲染解決方案表格
            }

            // 處理保存 TRIZ 參數 (改善/惡化參數)
            function handleSaveTrizParameters() {
                if (!currentTrizContradictionNodeId) return;
                const contradictionNode = findNodeById(rcaData, currentTrizContradictionNodeId);
                if (contradictionNode) {
                    const oldImproving = contradictionNode.improvingParameter;
                    const oldWorsening = contradictionNode.worseningParameter;
                    contradictionNode.improvingParameter = domElements.improvingParameterSelect.value === "未選擇" ? null : domElements.improvingParameterSelect.value;
                    contradictionNode.worseningParameter = domElements.worseningParameterSelect.value === "未選擇" ? null : domElements.worseningParameterSelect.value;
                    updateSuggestedPrinciples(); // 更新建議原理
                    // 如果參數有變化，則儲存歷史記錄並重新渲染解決方案表格
                    if (oldImproving !== contradictionNode.improvingParameter || oldWorsening !== contradictionNode.worseningParameter) {
                        pushStateToHistory(rcaData);
                        renderSolutionTable();
                    }
                }
            }

            /**
             * 渲染指定衝突節點的解決方案列表。
             * @param {string} contradictionNodeId - 衝突節點的 ID。
             */
            function renderSolutionsListForContradictionNode(contradictionNodeId) {
                domElements.solutionsListContainer.innerHTML = '';
                const contradictionNode = findNodeById(rcaData, contradictionNodeId);
                if (!contradictionNode || !contradictionNode.solutionsGenerated || contradictionNode.solutionsGenerated.length === 0) {
                    domElements.solutionsListContainer.innerHTML = '<p class="text-xs text-gray-500">此衝突節點尚無解決方案。</p>'; return;
                }

                contradictionNode.solutionsGenerated.forEach(sol => {
                    const solDiv = document.createElement('div');
                    solDiv.className = 'solution-entry flex justify-between items-center text-sm';
                    let solText = `<span class="font-semibold">${sol.principleName || '未指定原理'}:</span><span class="ml-2">${sol.description ? sol.description.substring(0, 40) + (sol.description.length > 40 ? '...' : '') : '無描述'}</span>`;
                    // 顯示理想性總分、時間和成本
                    if (sol.idealityAssessment && sol.idealityAssessment.weightedScore !== null && sol.idealityAssessment.weightedScore !== undefined) {
                        solText += `<br><span class="text-xs text-gray-500">理想性總分: ${sol.idealityAssessment.weightedScore.toFixed(2)} | 時:${sol.timeRequired ?? '-'} | 成本:${sol.cost ?? '-'}</span>`;
                    } else if (sol.timeRequired !== null || sol.cost !== null) {
                        solText += `<br><span class="text-xs text-gray-500">時:${sol.timeRequired ?? '-'} | 成本:${sol.cost ?? '-'}</span>`;
                    }
                    solDiv.innerHTML = `
                        <div>${solText}</div>
                        <div>
                            <button class="action-button bg-yellow-500 hover:bg-yellow-600 text-xs py-1 px-1.5 mr-1" onclick="App.showEditSolutionEntry('${sol.id}')" title="編輯方案"><i class="fas fa-edit"></i></button>
                            <button class="action-button bg-red-500 hover:bg-red-600 text-xs py-1 px-1.5" onclick="App.handleRemoveSolutionEntry('${sol.id}')" title="移除方案"><i class="fas fa-trash"></i></button>
                        </div>
                    `;
                    domElements.solutionsListContainer.appendChild(solDiv);
                });
            }

            /**
             * 顯示或隱藏編輯解決方案的表單。
             * @param {string|null} solutionId - 要編輯的解決方案 ID，如果為 null 則為新增。
             */
            function showEditSolutionEntry(solutionId) {
                const contradictionNode = findNodeById(rcaData, currentTrizContradictionNodeId);
                if (!contradictionNode) return;

                const { editingSolutionIdInput, editSolutionTitle, solutionPrincipleSelect, solutionDescriptionInput, solutionTimeRequiredInput, solutionMcdmScoreInput, solutionCostInput, editSolutionEntryContainer } = domElements;

                editingSolutionIdInput.value = solutionId || '';
                if (solutionId) {
                    const solution = contradictionNode.solutionsGenerated.find(s => s.id === solutionId);
                    if (solution) {
                        editSolutionTitle.textContent = "修訂解決方案";
                        solutionPrincipleSelect.value = solution.principleName;
                        solutionDescriptionInput.value = solution.description;
                        solutionTimeRequiredInput.value = solution.timeRequired || '';
                        solutionMcdmScoreInput.value = solution.mcdmScore !== null && solution.mcdmScore !== undefined ? solution.mcdmScore.toFixed(2) : '';
                        solutionCostInput.value = solution.cost || '';
                    } else { return; }
                } else {
                    editSolutionTitle.textContent = "新增解決方案";
                    solutionPrincipleSelect.value = trizMatrix.getInventivePrinciplesNames()[0]; // 預設選擇第一個原理
                    solutionDescriptionInput.value = '';
                    solutionTimeRequiredInput.value = '';
                    solutionMcdmScoreInput.value = '';
                    solutionCostInput.value = '';
                }
                editSolutionEntryContainer.style.display = 'block';
                solutionDescriptionInput.focus();
            }

            // 處理保存解決方案條目
            function handleSaveSolutionEntry() {
                const contradictionNode = findNodeById(rcaData, currentTrizContradictionNodeId);
                if (!contradictionNode) return;

                const { editingSolutionIdInput, solutionPrincipleSelect, solutionDescriptionInput, solutionTimeRequiredInput, solutionCostInput, editSolutionEntryContainer } = domElements;

                const solutionId = editingSolutionIdInput.value;
                const principle = solutionPrincipleSelect.value;
                const description = solutionDescriptionInput.value.trim();
                const timeRequired = solutionTimeRequiredInput.value ? parseFloat(solutionTimeRequiredInput.value) : null;
                const cost = solutionCostInput.value ? parseFloat(solutionCostInput.value) : null;

                if (!principle || principle === "未選擇") { alert("請選擇一個發明原理。"); return; }
                if (!description) { alert("請輸入方案描述。"); return; }

                if (!contradictionNode.solutionsGenerated) contradictionNode.solutionsGenerated = [];

                if (solutionId) {
                    // 更新現有解決方案
                    const solIndex = contradictionNode.solutionsGenerated.findIndex(s => s.id === solutionId);
                    if (solIndex > -1) {
                        const sol = contradictionNode.solutionsGenerated[solIndex];
                        sol.principleName = principle;
                        sol.description = description;
                        sol.timeRequired = timeRequired;
                        sol.cost = cost;
                        // 如果理想性評估不存在或格式不正確，則重新生成預設值
                        if (!sol.idealityAssessment || !Array.isArray(sol.idealityAssessment.criteria)) {
                             sol.idealityAssessment = getDefaultIdealityAssessment();
                             sol.mcdmScore = calculateWeightedScore(sol.idealityAssessment.criteria);
                        }
                    }
                } else {
                    // 新增解決方案
                    contradictionNode.solutionsGenerated.push({
                        id: `sol-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`,
                        principleName: principle, description: description, abcCategory: null,
                        timeRequired: timeRequired, mcdmScore: null, cost: cost,
                        idealityAssessment: getDefaultIdealityAssessment()
                    });
                }
                pushStateToHistory(rcaData);
                renderSolutionsListForContradictionNode(currentTrizContradictionNodeId); // 重新渲染解決方案列表
                editSolutionEntryContainer.style.display = 'none'; // 隱藏編輯表單
                editingSolutionIdInput.value = '';
                renderSolutionTable(); // 更新解決方案表格
                renderIdeasLandscapeChart(); // 更新創意景觀圖
            }

            /**
             * 處理移除解決方案條目。
             * @param {string} solutionId - 要移除的解決方案 ID。
             */
            function handleRemoveSolutionEntry(solutionId) {
                if (!currentTrizContradictionNodeId || !solutionId) return;
                const contradictionNode = findNodeById(rcaData, currentTrizContradictionNodeId);
                if (contradictionNode && contradictionNode.solutionsGenerated) {
                    contradictionNode.solutionsGenerated = contradictionNode.solutionsGenerated.filter(s => s.id !== solutionId);
                    pushStateToHistory(rcaData);
                    renderSolutionsListForContradictionNode(currentTrizContradictionNodeId); // 重新渲染解決方案列表
                    renderSolutionTable(); // 更新解決方案表格
                    renderIdeasLandscapeChart(); // 更新創意景觀圖
                }
            }

            // --- SVG 連接線繪製 ---
            /**
             * 繪製所有節點之間的 SVG 連接線。
             * @param {SVGElement} targetSvgLayer - SVG 層的 DOM 元素。
             * @param {HTMLElement} targetDiagramContainer - 圖表容器的 DOM 元素。
             * @param {HTMLElement} targetScalableWrapper - 可縮放內容包裝器的 DOM 元素。
             * @param {number} zoom - 當前的縮放級別。
             */
            function drawAllSvgConnectors(targetSvgLayer = domElements.svgLayer, targetDiagramContainer = domElements.diagramContainer, targetScalableWrapper = domElements.scalableContentWrapper, zoom = currentZoom) {
                if (!targetSvgLayer || !targetDiagramContainer || !targetScalableWrapper) return;
                targetSvgLayer.innerHTML = ''; // 清空現有連接線

                // 如果沒有數據或圖表容器中沒有根節點，則不繪製
                if (!rcaData || !targetDiagramContainer.querySelector(`#${rcaData.id}`)) {
                    targetSvgLayer.setAttribute('width', 0);
                    targetSvgLayer.setAttribute('height', 0);
                    return;
                }

                // 獲取可縮放包裝器的 padding
                const wrapperStyle = getComputedStyle(targetScalableWrapper);
                const wrapperPaddingLeft = parseFloat(wrapperStyle.paddingLeft) || 0;
                const wrapperPaddingTop = parseFloat(wrapperStyle.paddingTop) || 0;

                // 設置 SVG 視圖框以匹配圖表內容的未縮放尺寸
                const unscaledDiagramWidth = targetDiagramContainer.scrollWidth;
                const unscaledDiagramHeight = targetDiagramContainer.scrollHeight;
                targetSvgLayer.setAttribute('width', unscaledDiagramWidth);
                targetSvgLayer.setAttribute('height', unscaledDiagramHeight);
                targetSvgLayer.setAttribute('viewBox', `0 0 ${unscaledDiagramWidth} ${unscaledDiagramHeight}`);

                const lineVerticalOffset = 25; // 連接線的垂直偏移量
                const scalableWrapperRect = targetScalableWrapper.getBoundingClientRect();

                /**
                 * 遞迴繪製節點及其子節點的連接線。
                 * @param {object} parentNodeData - 父節點的數據。
                 * @param {HTMLElement} currentContainer - 當前包含節點的 DOM 容器。
                 */
                function drawRecursive(parentNodeData, currentContainer) {
                    const parentElement = currentContainer.querySelector(`#${parentNodeData.id}`);
                    if (!parentElement) return;

                    const parentRect = parentElement.getBoundingClientRect();
                    // 計算父節點在 SVG 坐標系中的中心底部坐標
                    const parentBottomCenterX_svg = (parentRect.left - (scalableWrapperRect.left + wrapperPaddingLeft) + parentRect.width / 2) / zoom;
                    const parentBottomY_svg = (parentRect.top - (scalableWrapperRect.top + wrapperPaddingTop) + parentRect.height) / zoom;
                    const parentTopY_svg = (parentRect.top - (scalableWrapperRect.top + wrapperPaddingTop)) / zoom;
                    const parentCenterX_svg = parentBottomCenterX_svg;

                    // 繪製 AND 輸入源連接線
                    if (parentNodeData.andSourceNodeIds && parentNodeData.andSourceNodeIds.length > 0) {
                        const mergePointYOffset = 40;
                        const mergePoint_svg = { x: parentCenterX_svg, y: parentTopY_svg - mergePointYOffset };
                        if(mergePoint_svg.y < 0) mergePoint_svg.y = 10; // 防止合併點超出可見範圍
                        _drawSvgCircle(targetSvgLayer, mergePoint_svg.x, mergePoint_svg.y, 6, '#6d28d9', zoom); // 繪製合併點圓圈

                        parentNodeData.andSourceNodeIds.forEach(sourceId => {
                            const sourceElement = domElements.diagramContainer.querySelector(`#${sourceId}`);
                            if (sourceElement) {
                                const sourceRect = sourceElement.getBoundingClientRect();
                                const sourceConnX_svg = (sourceRect.left - (scalableWrapperRect.left + wrapperPaddingLeft) + sourceRect.width / 2) / zoom;
                                const sourceConnY_svg = (sourceRect.top - (scalableWrapperRect.top + wrapperPaddingTop) + sourceRect.height) / zoom;
                                // 根據源節點位置繪製連接線
                                if (sourceConnY_svg < mergePoint_svg.y) {
                                    _drawSvgLine(targetSvgLayer, sourceConnX_svg, sourceConnY_svg, mergePoint_svg.x, mergePoint_svg.y, '#6b7280', 2, zoom);
                                } else {
                                    const sourceTopY_svg = (sourceRect.top - (scalableWrapperRect.top + wrapperPaddingTop)) / zoom;
                                    _drawSvgLine(targetSvgLayer, sourceConnX_svg, sourceTopY_svg, mergePoint_svg.x, mergePoint_svg.y, '#6b7280', 2, zoom);
                                }
                            }
                        });
                        // 從合併點到父節點頂部的連接線
                        if (parentTopY_svg > mergePoint_svg.y) {
                            _drawSvgLine(targetSvgLayer, mergePoint_svg.x, mergePoint_svg.y, parentCenterX_svg, parentTopY_svg, '#6b7280', 2, zoom);
                        }
                    }

                    // 過濾掉作為 AND 輸入源的子節點，只處理標準父子連接
                    const standardChildren = parentNodeData.children ? parentNodeData.children.filter(c => c && !(c.andSourceNodeIds && c.andSourceNodeIds.length > 0 && c.andSourceNodeIds.includes(parentNodeData.id))) : [];

                    if (standardChildren.length > 0) {
                        const horizontalLineY_svg = parentBottomY_svg + lineVerticalOffset;
                        // 繪製從父節點底部到水平線的垂直線
                        _drawSvgLine(targetSvgLayer, parentBottomCenterX_svg, parentBottomY_svg, parentBottomCenterX_svg, horizontalLineY_svg, '#9ca3af', 2, zoom);

                        if (standardChildren.length > 1) {
                            // 如果有多個子節點，繪製連接所有子節點的水平線
                            const firstChildElement = currentContainer.querySelector(`#${standardChildren[0].id}`);
                            const lastChildElement = currentContainer.querySelector(`#${standardChildren[standardChildren.length - 1].id}`);
                            if (firstChildElement && lastChildElement) {
                                const firstChildRect = firstChildElement.getBoundingClientRect();
                                const lastChildRect = lastChildElement.getBoundingClientRect();
                                const hLineStartX_svg = (firstChildRect.left - (scalableWrapperRect.left + wrapperPaddingLeft) + firstChildRect.width / 2) / zoom;
                                const hLineEndX_svg = (lastChildRect.left - (scalableWrapperRect.left + wrapperPaddingLeft) + lastChildRect.width / 2) / zoom;
                                if (Math.abs(hLineStartX_svg - hLineEndX_svg) > 1) { _drawSvgLine(targetSvgLayer, hLineStartX_svg, horizontalLineY_svg, hLineEndX_svg, horizontalLineY_svg, '#9ca3af', 2, zoom); }
                            }
                        } else if (standardChildren.length === 1) {
                            // 如果只有一個子節點，繪製從父節點中心到子節點中心的水平線
                            const childElement = currentContainer.querySelector(`#${standardChildren[0].id}`);
                            if (childElement) {
                                const childRect = childElement.getBoundingClientRect();
                                const childCenterX_svg = (childRect.left - (scalableWrapperRect.left + wrapperPaddingLeft) + childRect.width / 2) / zoom;
                                if (Math.abs(parentBottomCenterX_svg - childCenterX_svg) > 1) { _drawSvgLine(targetSvgLayer, parentBottomCenterX_svg, horizontalLineY_svg, childCenterX_svg, horizontalLineY_svg, '#9ca3af', 2, zoom); }
                            }
                        }

                        // 繪製從水平線到每個子節點頂部的垂直線
                        standardChildren.forEach(childNode => {
                            if (!childNode) return;
                            const childElement = currentContainer.querySelector(`#${childNode.id}`);
                            if (childElement) {
                                const childRect = childElement.getBoundingClientRect();
                                const childCenterX_svg = (childRect.left - (scalableWrapperRect.left + wrapperPaddingLeft) + childRect.width / 2) / zoom;
                                const childTopY_svg = (childRect.top - (scalableWrapperRect.top + wrapperPaddingTop)) / zoom;
                                if (childTopY_svg > horizontalLineY_svg) {
                                    _drawSvgLine(targetSvgLayer, childCenterX_svg, horizontalLineY_svg, childCenterX_svg, childTopY_svg, '#9ca3af', 2, zoom);
                                    // 繪製連接線標籤
                                    if (childNode.connectorLabelToParent && childNode.connectorLabelToParent.trim() !== "") {
                                        const labelX = childCenterX_svg;
                                        const labelY = (horizontalLineY_svg + childTopY_svg) / 2;
                                        _drawSvgTextWithBackground(targetSvgLayer, childNode.connectorLabelToParent, labelX, labelY, 10 / zoom, '#333333', zoom);
                                    }
                                }
                            }
                        });
                    }
                    // 遞迴呼叫繪製子節點的連接線
                    if (parentNodeData.children && Array.isArray(parentNodeData.children)) { parentNodeData.children.forEach(childNode => { if (childNode && typeof childNode === 'object') drawRecursive(childNode, currentContainer); }); }
                }
                // 從根節點開始繪製
                if(rcaData && typeof rcaData === 'object') drawRecursive(rcaData, domElements.diagramContainer);
            }

            /**
             * 在 SVG 中繪製一條線。
             * @param {SVGElement} svg - SVG 元素。
             * @param {number} x1 - 起點 X 坐標。
             * @param {number} y1 - 起點 Y 坐標。
             * @param {number} x2 - 終點 X 坐標。
             * @param {number} y2 - 終點 Y 坐標。
             * @param {string} color - 線條顏色。
             * @param {number} strokeWidth - 線條寬度。
             * @param {number} zoomFactor - 縮放因子。
             */
            function _drawSvgLine(svg, x1, y1, x2, y2, color = 'black', strokeWidth = 2, zoomFactor = 1) {
                if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2)) { return; }
                const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                line.setAttribute('x1', x1);
                line.setAttribute('y1', y1);
                line.setAttribute('x2', x2);
                line.setAttribute('y2', y2);
                line.setAttribute('stroke', color);
                line.setAttribute('stroke-width', strokeWidth / zoomFactor);
                svg.appendChild(line);
            }

            /**
             * 在 SVG 中繪製一個圓。
             * @param {SVGElement} svg - SVG 元素。
             * @param {number} cx - 圓心 X 坐標。
             * @param {number} cy - 圓心 Y 坐標。
             * @param {number} r - 半徑。
             * @param {string} fillColor - 填充顏色。
             * @param {number} zoomFactor - 縮放因子。
             */
            function _drawSvgCircle(svg, cx, cy, r, fillColor = 'black', zoomFactor = 1) {
                if (isNaN(cx) || isNaN(cy) || isNaN(r)) { return; }
                const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                circle.setAttribute('cx', cx);
                circle.setAttribute('cy', cy);
                circle.setAttribute('r', r / zoomFactor);
                circle.setAttribute('fill', fillColor);
                svg.appendChild(circle);
            }

            /**
             * 在 SVG 中繪製帶背景的文本。
             * @param {SVGElement} svg - SVG 元素。
             * @param {string} textContent - 文本內容。
             * @param {number} x - 文本 X 坐標。
             * @param {number} y - 文本 Y 坐標。
             * @param {number} fontSize - 字體大小。
             * @param {string} fillColor - 文本顏色。
             * @param {number} zoomFactor - 縮放因子。
             */
            function _drawSvgTextWithBackground(svg, textContent, x, y, fontSize, fillColor, zoomFactor = 1) {
                if (isNaN(x) || isNaN(y)) return;

                const textElement = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                textElement.setAttribute('x', x);
                textElement.setAttribute('y', y);
                textElement.setAttribute('font-size', fontSize);
                textElement.setAttribute('fill', fillColor);
                textElement.setAttribute('text-anchor', 'middle');
                textElement.setAttribute('dominant-baseline', 'middle');
                textElement.classList.add('connector-label-text');
                textElement.textContent = textContent;
                svg.appendChild(textElement);

                // 獲取文本的邊界框以繪製背景
                const bbox = textElement.getBBox();
                svg.removeChild(textElement); // 暫時移除文本以繪製背景

                const padding = 2 / zoomFactor;
                const rectElement = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                rectElement.setAttribute('x', bbox.x - padding);
                rectElement.setAttribute('y', bbox.y - padding);
                rectElement.setAttribute('width', bbox.width + (2 * padding));
                rectElement.setAttribute('height', bbox.height + (2 * padding));
                rectElement.setAttribute('rx', 2 / zoomFactor); // 圓角
                rectElement.setAttribute('ry', 2 / zoomFactor); // 圓角
                rectElement.classList.add('connector-label-bg');
                svg.appendChild(rectElement);
                svg.appendChild(textElement); // 重新添加文本
            }

            // --- 表格渲染 ---
            /**
             * 切換原因效果表的顯示狀態。
             * @param {boolean} forceShow - 如果為 true，則強制顯示表格。
             */
            function handleToggleCauseEffectTable(forceShow = false) {
                const isHidden = domElements.causeEffectTableSection.style.display === 'none';
                if (forceShow || isHidden) { domElements.causeEffectTableSection.style.display = 'block'; renderCauseEffectTable(); }
                else if (!forceShow) { domElements.causeEffectTableSection.style.display = 'none'; }
            }

            /**
             * 收集原因效果表的數據。
             * @returns {Array<object>} 包含表格行數據的陣列。
             */
            function getCauseEffectTableData() {
                const tableRowsData = [];
                function collectDataRecursive(node) {
                    if (!node) return;
                    if (node.type === 'cause') { // 僅原因節點會列在此表中
                        const { hasPositiveChild, hasNegativeChild } = checkChildrenEffects(node);
                        let causeType = '';
                        if (node.isNonChangeable) causeType = 'NC';
                        else if (hasPositiveChild && hasNegativeChild) causeType = 'N+P (矛盾)';
                        else if (hasNegativeChild) causeType = 'N (純負面)';
                        else if (hasPositiveChild) causeType = 'P (純正面)';
                        else causeType = '未定義效果';

                        // 僅包含非純粹正面或帶有效果的原因
                        if (causeType !== 'P (純正面)' || (hasPositiveChild || hasNegativeChild)) {
                            const positiveEffects = (node.children && Array.isArray(node.children) ? node.children.filter(c => c && c.type === 'positive-effect').map(c => c.text).join('; ') : '') || '無';
                            const negativeEffects = (node.children && Array.isArray(node.children) ? node.children.filter(c => c && c.type === 'negative-effect').map(c => c.text).join('; ') : '') || '無';
                            tableRowsData.push({ cause: node.text, abc: node.abcCategory || '-', type: causeType, positive: positiveEffects, negative: negativeEffects });
                        }
                    }
                    if (node.children && Array.isArray(node.children)) node.children.forEach(collectDataRecursive);
                }
                if (rcaData) collectDataRecursive(rcaData);
                return tableRowsData;
            }

            // 渲染原因效果表
            function renderCauseEffectTable() {
                if (!domElements.causeEffectTableBody) return;
                if (!rcaData) { domElements.causeEffectTableBody.innerHTML = '<tr><td colspan="5" class="text-center text-gray-500">請先設定主要負面效果並建立分析圖。</td></tr>'; return; }
                const tableData = getCauseEffectTableData();
                domElements.causeEffectTableBody.innerHTML = '';
                if (tableData.length === 0) { domElements.causeEffectTableBody.innerHTML = '<tr><td colspan="5" class="text-center text-gray-500">目前圖表中沒有定義直接帶有正面或負面效果的原因 (且非純粹正面原因)。</td></tr>'; return; }
                tableData.forEach(rowData => {
                    const row = domElements.causeEffectTableBody.insertRow();
                    row.insertCell().textContent = rowData.cause;
                    row.insertCell().textContent = rowData.abc;
                    row.insertCell().textContent = rowData.type;
                    row.insertCell().textContent = rowData.positive;
                    row.insertCell().textContent = rowData.negative;
                });
            }

            /**
             * 切換解決方案表的顯示狀態。
             * @param {boolean} forceShow - 如果為 true，則強制顯示表格。
             */
            function handleToggleSolutionTable(forceShow = false) {
                const isHidden = domElements.solutionTableSection.style.display === 'none';
                if (forceShow || isHidden) { domElements.solutionTableSection.style.display = 'block'; renderSolutionTable(); }
                else if (!forceShow) { domElements.solutionTableSection.style.display = 'none'; }
            }

            // 渲染解決方案表
            function renderSolutionTable() {
                if (!domElements.solutionTableBody) return;
                if (!rcaData) { domElements.solutionTableBody.innerHTML = '<tr><td colspan="8" class="text-center text-gray-500">請先設定主要負面效果並建立分析圖。</td></tr>'; return; }
                const allSolutions = getAllSolutionsWithDetails();
                domElements.solutionTableBody.innerHTML = '';

                // 根據篩選器過濾解決方案
                const filteredSolutions = allSolutions.filter(sol => {
                    if (currentAbcSolutionFilter === 'all') return true;
                    if (currentAbcSolutionFilter === 'none') return !sol.abcCategory;
                    return sol.abcCategory === currentAbcSolutionFilter;
                });

                if (filteredSolutions.length === 0) {
                    let message = '目前沒有符合篩選條件的潛在解決方案。';
                    if (allSolutions.length === 0) { message = '提示：請先找出衝突節點 (同時有`+`和`-`效果)，然後為其「設定衝突參數/方案」。'; }
                    domElements.solutionTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-gray-500">${message}</td></tr>`; return;
                }

                filteredSolutions.forEach(solDetail => {
                    const row = domElements.solutionTableBody.insertRow();
                    row.insertCell().textContent = solDetail.contradictionNodeText;
                    row.insertCell().textContent = solDetail.improvingParameter || '-';
                    row.insertCell().textContent = solDetail.worseningParameter || '-';
                    row.insertCell().textContent = solDetail.principleName;
                    row.insertCell().textContent = solDetail.description;

                    const abcCell = row.insertCell();
                    const abcSelect = document.createElement('select');
                    abcSelect.classList.add('abc-select');
                    ['-', 'A', 'B', 'C'].forEach(cat => {
                        const option = document.createElement('option');
                        option.value = cat === '-' ? '' : cat;
                        option.textContent = cat;
                        if ((solDetail.abcCategory || '') === option.value) { option.selected = true; }
                        abcSelect.appendChild(option);
                    });
                    abcSelect.onchange = (e) => { updateSolutionAbcCategory(solDetail.contradictionNodeId, solDetail.solutionId, e.target.value || null); };
                    abcCell.appendChild(abcSelect);

                    const assessCell = row.insertCell();
                    const assessButton = createActionButton('評估理想性', 'ideality-assess-button bg-blue-500 hover:bg-blue-600', () => {
                        openIdealityAssessmentModal(solDetail.contradictionNodeId, solDetail.solutionId);
                    });
                    assessCell.appendChild(assessButton);

                    const scoreCell = row.insertCell();
                    scoreCell.classList.add('ideality-score-display');
                    scoreCell.textContent = solDetail.mcdmScore !== null && solDetail.mcdmScore !== undefined ? solDetail.mcdmScore.toFixed(2) : '-';
                });
            }

            /**
             * 收集所有節點下的解決方案及其詳細信息。
             * @returns {Array<object>} 包含所有解決方案詳細信息的陣列。
             */
            function getAllSolutionsWithDetails() {
                const solutionsList = [];
                function findSolutionsRecursive(node) {
                    if (!node) return;
                    // 檢查此節點是否為衝突節點（同時具有正面和負面子節點）
                    const { hasPositiveChild, hasNegativeChild } = checkChildrenEffects(node);
                    if (hasPositiveChild && hasNegativeChild) {
                        if (node.solutionsGenerated && node.solutionsGenerated.length > 0) {
                            node.solutionsGenerated.forEach(sol => {
                                solutionsList.push({
                                    contradictionNodeId: node.id,
                                    contradictionNodeText: node.text,
                                    improvingParameter: node.improvingParameter,
                                    worseningParameter: node.worseningParameter,
                                    solutionId: sol.id,
                                    principleName: sol.principleName,
                                    description: sol.description,
                                    abcCategory: sol.abcCategory,
                                    timeRequired: sol.timeRequired,
                                    mcdmScore: sol.mcdmScore,
                                    cost: sol.cost,
                                    idealityAssessment: sol.idealityAssessment || getDefaultIdealityAssessment()
                                });
                            });
                        }
                    }
                    if (node.children && Array.isArray(node.children)) { node.children.forEach(findSolutionsRecursive); }
                }
                if (rcaData) findSolutionsRecursive(rcaData);
                return solutionsList;
            }

            /**
             * 更新解決方案的 ABC 分類。
             * @param {string} contradictionNodeId - 解決方案所屬的衝突節點 ID。
             * @param {string} solutionId - 要更新的解決方案 ID。
             * @param {string|null} newAbcCategory - 新的 ABC 分類。
             */
            function updateSolutionAbcCategory(contradictionNodeId, solutionId, newAbcCategory) {
                const contradictionNode = findNodeById(rcaData, contradictionNodeId);
                if (contradictionNode && contradictionNode.solutionsGenerated) {
                    const solution = contradictionNode.solutionsGenerated.find(s => s.id === solutionId);
                    if (solution) {
                        solution.abcCategory = newAbcCategory;
                        pushStateToHistory(rcaData);
                        renderSolutionTable(); // 重新渲染表格
                        renderIdeasLandscapeChart(); // 重新渲染創意景觀圖
                    }
                }
            }

            // --- 創意景觀圖功能 ---
            /**
             * 切換創意景觀圖的顯示狀態。
             * @param {boolean} forceShow - 如果為 true，則強制顯示圖表。
             */
            function handleToggleIdeasLandscape(forceShow = false) {
                const isHidden = domElements.ideasLandscapeSection.style.display === 'none';
                if (forceShow || isHidden) { domElements.ideasLandscapeSection.style.display = 'block'; renderIdeasLandscapeChart(); }
                else if (!forceShow) { domElements.ideasLandscapeSection.style.display = 'none'; }
            }

            /**
             * 獲取用於創意景觀圖的數據點。
             * @returns {Array<object>} 包含圖表數據點的陣列。
             */
            function getChartDataPoints() {
                // 過濾掉時間或 MCDM 分數為空的解決方案
                const solutions = getAllSolutionsWithDetails().filter(s => s.timeRequired !== null && s.mcdmScore !== null && s.mcdmScore !== undefined);
                return solutions.map(sol => ({
                    x: sol.timeRequired,
                    y: sol.mcdmScore,
                    label: sol.description,
                    shortLabel: sol.description.substring(0, 20) + (sol.description.length > 20 ? "..." : ""),
                    cost: sol.cost,
                    abc: sol.abcCategory || 'none',
                    ideality: sol.mcdmScore,
                    id: sol.solutionId
                }));
            }

            /**
             * 獲取 Chart.js 圖表的選項。
             * @param {number} timeThreshold - 時間閾值（X 軸中線）。
             * @param {number} scoreThreshold - 分數閾值（Y 軸中線）。
             * @returns {object} Chart.js 選項對象。
             */
            function getChartOptions(timeThreshold, scoreThreshold) {
                return {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: { title: { display: true, text: '導入所需時間 (單位自訂)', font: { weight: 'bold' } }, grid: { color: '#e5e7eb' } },
                        y: { title: { display: true, text: '理想性加權總分 (MCDM)', font: { weight: 'bold' } }, grid: { color: '#e5e7eb' } }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.raw.label || '';
                                    if (label) { label = `方案: ${label.substring(0,50)}${label.length > 50 ? '...' : ''}\n`; }
                                    else { label = `方案ID: ${context.raw.id}\n`;}
                                    label += `時間: ${context.raw.x}, 理想性總分: ${context.raw.y.toFixed(2)}`;
                                    if (context.raw.cost !== null && context.raw.cost !== undefined) label += `\n成本: ${context.cost}`;
                                    if (context.raw.abc && context.raw.abc !== 'none') label += `\nABC分類: ${context.raw.abc}`;
                                    return label.split('\n');
                                }
                            },
                            backgroundColor: 'rgba(0,0,0,0.8)',
                            titleFont: { weight: 'bold' },
                            bodyFont: { size: 11 },
                            padding: 10,
                            displayColors: false,
                        },
                        legend: { display: false },
                        quadrantDrawer: { timeThreshold: timeThreshold, scoreThreshold: scoreThreshold }
                    },
                };
            }

            // Chart.js 象限繪製插件
            const quadrantPlugin = {
                id: 'quadrantDrawer',
                afterDraw: (chart, args, options) => {
                    const {ctx, chartArea: {left, right, top, bottom}, scales: {x, y}} = chart;
                    const { timeThreshold, scoreThreshold } = options;
                    ctx.save();
                    ctx.globalCompositeOperation = 'destination-over'; // 確保象限在數據點下方

                    const xThresholdPixel = x.getPixelForValue(timeThreshold);
                    const yThresholdPixel = y.getPixelForValue(scoreThreshold);

                    // 定義四個象限的繪製區域
                    const q2 = { x: left, y: top, width: xThresholdPixel - left, height: yThresholdPixel - top };
                    const q1 = { x: xThresholdPixel, y: top, width: right - xThresholdPixel, height: yThresholdPixel - top };
                    const q3 = { x: left, y: yThresholdPixel, width: xThresholdPixel - left, height: bottom - yThresholdPixel };
                    const q4 = { x: xThresholdPixel, y: yThresholdPixel, width: right - xThresholdPixel, height: bottom - yThresholdPixel };

                    // 繪製象限背景色
                    ctx.fillStyle = QUADRANT_COLORS.Q2; if (q2.width > 0 && q2.height > 0) ctx.fillRect(q2.x, q2.y, q2.width, q2.height);
                    ctx.fillStyle = QUADRANT_COLORS.Q1; if (q1.width > 0 && q1.height > 0) ctx.fillRect(q1.x, q1.y, q1.width, q1.height);
                    ctx.fillStyle = QUADRANT_COLORS.Q3; if (q3.width > 0 && q3.height > 0) ctx.fillRect(q3.x, q3.y, q3.width, q3.height);
                    ctx.fillStyle = QUADRANT_COLORS.Q4; if (q4.width > 0 && q4.height > 0) ctx.fillRect(q4.x, q4.y, q4.width, q4.height);
                    ctx.globalCompositeOperation = 'source-over'; // 恢復繪圖模式

                    // 繪製閾值線
                    if (xThresholdPixel >= left && xThresholdPixel <= right) { ctx.beginPath(); ctx.strokeStyle = 'rgba(0, 0, 0, 0.4)'; ctx.lineWidth = 1.5; ctx.setLineDash([6, 3]); ctx.moveTo(xThresholdPixel, top); ctx.lineTo(xThresholdPixel, bottom); ctx.stroke(); ctx.setLineDash([]); }
                    if (yThresholdPixel >= top && yThresholdPixel <= bottom) { ctx.beginPath(); ctx.strokeStyle = 'rgba(0, 0, 0, 0.4)'; ctx.lineWidth = 1.5; ctx.setLineDash([6, 3]); ctx.moveTo(left, yThresholdPixel); ctx.lineTo(right, yThresholdPixel); ctx.stroke(); ctx.setLineDash([]); }

                    // 繪製象限標籤
                    ctx.fillStyle = '#374151';
                    ctx.font = 'bold 11px Inter';
                    ctx.textAlign = 'center';
                    const padding = 8;
                    if (q2.width > 20 && q2.height > 20) ctx.fillText(QUADRANT_LABELS.Q2, q2.x + q2.width / 2, q2.y + padding + 5);
                    if (q3.width > 20 && q3.height > 20) ctx.fillText(QUADRANT_LABELS.Q3, q3.x + q3.width / 2, q3.y + q3.height - padding);
                    if (q1.width > 20 && q1.height > 20) ctx.fillText(QUADRANT_LABELS.Q1, q1.x + q1.width / 2, q1.y + padding + 5);
                    if (q4.width > 20 && q4.height > 20) ctx.fillText(QUADRANT_LABELS.Q4, q4.x + q4.width / 2, q4.y + q4.height - padding);
                    ctx.restore();
                }
            };
            // 註冊 Chart.js 插件
            if (typeof Chart !== 'undefined') { Chart.register(quadrantPlugin); }

            // 渲染創意景觀圖
            function renderIdeasLandscapeChart() {
                if (!domElements.ideasLandscapeChartCanvas || typeof Chart === 'undefined') {
                    if (ideasLandscapeChartInstance) { ideasLandscapeChartInstance.destroy(); ideasLandscapeChartInstance = null; }
                    domElements.ideasLandscapeNoDataMessage.style.display = 'flex'; return;
                }

                const dataPoints = getChartDataPoints();
                if (dataPoints.length === 0) {
                    if (ideasLandscapeChartInstance) { ideasLandscapeChartInstance.destroy(); ideasLandscapeChartInstance = null; }
                    domElements.ideasLandscapeNoDataMessage.style.display = 'flex'; return;
                }
                domElements.ideasLandscapeNoDataMessage.style.display = 'none';

                const timeThreshold = parseFloat(domElements.landscapeTimeThresholdInput.value) || 0;
                const scoreThreshold = parseFloat(domElements.landscapeScoreThresholdInput.value) || 0;

                if (ideasLandscapeChartInstance) { ideasLandscapeChartInstance.destroy(); }

                const ctx = domElements.ideasLandscapeChartCanvas.getContext('2d');
                ideasLandscapeChartInstance = new Chart(ctx, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: '解決方案創意',
                            data: dataPoints,
                            backgroundColor: dataPoints.map(p => ABC_COLORS[p.abc] || ABC_COLORS['none']),
                            borderColor: dataPoints.map(p => ABC_BORDER_COLORS[p.abc] || ABC_BORDER_COLORS['none']),
                            borderWidth: 1.5,
                            // 點的大小根據成本和理想性調整
                            pointRadius: dataPoints.map(p => Math.min(Math.max(5 + (p.cost !== null && p.cost !== undefined && p.cost > 0 ? Math.log10(p.cost / 100 + 1) * 2 : p.ideality / 2), 4), 15)),
                            pointStyle: dataPoints.map(p => ABC_POINT_STYLES[p.abc] || ABC_POINT_STYLES['none']),
                            hoverRadius: dataPoints.map(p => Math.min(Math.max(7 + (p.cost !== null && p.cost !== undefined && p.cost > 0 ? Math.log10(p.cost / 100 + 1) * 2.5 : p.ideality / 1.5), 6), 18)),
                        }]
                    },
                    options: getChartOptions(timeThreshold, scoreThreshold)
                });
            }

            // --- TRIZ 理想性評估功能 ---
            /**
             * 開啟理想性評估模態視窗。
             * @param {string} contradictionNodeId - 解決方案所屬的衝突節點 ID。
             * @param {string} solutionId - 要評估的解決方案 ID。
             */
            function openIdealityAssessmentModal(contradictionNodeId, solutionId) {
                const contradictionNode = findNodeById(rcaData, contradictionNodeId);
                if (!contradictionNode || !contradictionNode.solutionsGenerated) { console.error("openIdealityAssessmentModal: 未找到衝突節點或解決方案。", { contradictionNodeId, solutionId, contradictionNode }); return; }
                const solution = contradictionNode.solutionsGenerated.find(s => s.id === solutionId);
                if (!solution) { console.error("openIdealityAssessmentModal: 未找到對應的解決方案。", { contradictionNodeId, solutionId, solution }); return; }
                if (!domElements.idealityAssessmentModal || !domElements.idealityCriteriaContainer) { console.error("openIdealityAssessmentModal: 模態視窗或準則容器 DOM 元素未在 domElements 中找到。", domElements); alert("理想性評估視窗初始化失敗，請檢查控制台錯誤訊息。"); return; }

                currentAssessingSolution = { contradictionNodeId, solutionId };
                domElements.assessingSolutionContradictionNodeIdInput.value = contradictionNodeId;
                domElements.assessingSolutionEntryIdInput.value = solutionId;
                domElements.idealityModalSolutionText.textContent = `評估方案: ${solution.description.substring(0,60)}${solution.description.length > 60 ? '...' : ''}`;

                // 如果解決方案沒有理想性評估數據，則初始化為預設值
                if (!solution.idealityAssessment || !Array.isArray(solution.idealityAssessment.criteria)) {
                    solution.idealityAssessment = getDefaultIdealityAssessment();
                } else {
                    // 更新現有準則與最新預設準則的同步
                    const newCriteriaState = [];
                    customIdealityCriteria.forEach(defaultCrit => {
                        const existingCrit = solution.idealityAssessment.criteria.find(c => c.id === defaultCrit.id);
                        // 如果存在，則更新名稱和描述；否則，添加預設準則
                        newCriteriaState.push(existingCrit ? { ...existingCrit, name: defaultCrit.name, description: defaultCrit.description } : { ...defaultCrit });
                    });
                    // 過濾掉不再在 customIdealityCriteria 中的準則（如果被移除）
                    solution.idealityAssessment.criteria = newCriteriaState.filter(crit => customIdealityCriteria.some(c => c.id === crit.id));
                }

                domElements.idealityCriteriaContainer.innerHTML = '';
                // 為每個評估準則創建 UI 元素
                solution.idealityAssessment.criteria.forEach((crit, index) => {
                    const criterionDiv = document.createElement('div');
                    criterionDiv.className = 'ideality-criterion';
                    criterionDiv.innerHTML = `
                        <label for="ideality-crit-${crit.id}-range">
                            ${index + 1}. ${crit.name} (0-10)
                            <span class="tooltip-container">
                                <i class="fas fa-info-circle text-gray-400 hover:text-gray-600"></i>
                                <span class="tooltip-text">${crit.description}</span>
                            </span>
                        </label>
                        <div class="flex items-center">
                            <input type="range" id="ideality-crit-${crit.id}-range" min="0" max="10" value="${crit.score}" class="input-field flex-grow" data-criterion-id="${crit.id}">
                            <span id="ideality-crit-${crit.id}-value" class="range-value">${crit.score}</span>
                        </div>
                        <label for="ideality-crit-${crit.id}-weight" class="text-xs mt-1">
                            權重 (0-1):
                            <input type="number" id="ideality-crit-${crit.id}-weight" value="${crit.weight}" step="0.01" min="0" max="1" class="input-field text-xs p-1 w-20 inline-block ml-1" data-criterion-id="${crit.id}">
                            <span class="tooltip-container">
                                <i class="fas fa-info-circle text-gray-400 hover:text-gray-600"></i>
                                <span class="tooltip-text">
                                    此準則在總分計算中的重要性。所有權重總和建議為 1。
                                    <br>例如：0.25 代表佔 25% 的重要性。
                                </span>
                            </span>
                        </label>
                    `;
                    domElements.idealityCriteriaContainer.appendChild(criterionDiv);

                    const rangeInput = criterionDiv.querySelector(`#ideality-crit-${crit.id}-range`);
                    const valueDisplay = criterionDiv.querySelector(`#ideality-crit-${crit.id}-value`);
                    const weightInput = criterionDiv.querySelector(`#ideality-crit-${crit.id}-weight`);

                    // 監聽分數和權重變化以實時更新總分
                    if (rangeInput && valueDisplay) { rangeInput.addEventListener('input', (e) => { valueDisplay.textContent = e.target.value; updateIdealityTotalScoreDisplay(); }); }
                    if (weightInput) { weightInput.addEventListener('input', updateIdealityTotalScoreDisplay); }
                });

                updateIdealityTotalScoreDisplay();
                domElements.idealityAssessmentModal.style.display = 'flex';
            }

            // 關閉理想性評估模態視窗
            function closeIdealityAssessmentModal() {
                domElements.idealityAssessmentModal.style.display = 'none';
                currentAssessingSolution = { contradictionNodeId: null, solutionId: null };
            }

            /**
             * 計算加權總分。
             * @param {Array<object>} criteriaArray - 包含評估準則（分數和權重）的陣列。
             * @returns {number} 計算出的加權總分。
             */
            function calculateWeightedScore(criteriaArray) {
                let totalWeightedScore = 0;
                let totalWeightSum = 0; // 用於檢查權重總和
                criteriaArray.forEach(crit => {
                    totalWeightedScore += crit.score * crit.weight;
                    totalWeightSum += crit.weight;
                });
                return totalWeightedScore;
            }

            // 更新理想性總分顯示和權重總和警告
            function updateIdealityTotalScoreDisplay() {
                let currentCriteriaScoresAndWeights = [];
                domElements.idealityCriteriaContainer.querySelectorAll('.ideality-criterion').forEach(criterionDiv => {
                    const criterionId = criterionDiv.querySelector('input[type="range"]').dataset.criterionId;
                    const score = parseFloat(criterionDiv.querySelector('input[type="range"]').value);
                    const weight = parseFloat(criterionDiv.querySelector('input[type="number"]').value) || 0;
                    currentCriteriaScoresAndWeights.push({ id: criterionId, score: score, weight: weight });
                });

                let totalWeightedScore = 0;
                let totalWeightSum = 0;
                currentCriteriaScoresAndWeights.forEach(crit => {
                    totalWeightedScore += crit.score * crit.weight;
                    totalWeightSum += crit.weight;
                });

                domElements.idealityTotalScoreDisplay.textContent = totalWeightedScore.toFixed(2);

                // 檢查權重總和是否接近 1
                if (Math.abs(totalWeightSum - 1.0) > 0.001) {
                    domElements.idealityWeightsSumWarning.textContent = `注意：目前權重總和為 ${totalWeightSum.toFixed(2)}，建議調整至 1.00。`;
                    domElements.idealityWeightsSumWarning.style.display = 'block';
                } else { domElements.idealityWeightsSumWarning.style.display = 'none'; }
            }

            // 重設理想性評估權重為預設值
            function resetIdealityWeights() {
                const contradictionNodeId = domElements.assessingSolutionContradictionNodeIdInput.value;
                const solutionId = domElements.assessingSolutionEntryIdInput.value;
                const contradictionNode = findNodeById(rcaData, contradictionNodeId);
                const solution = contradictionNode ? contradictionNode.solutionsGenerated.find(s => s.id === solutionId) : null;
                if (!solution || !solution.idealityAssessment) return;

                // 將解決方案的評估準則分數和權重重設為自訂準則中的預設值
                solution.idealityAssessment.criteria.forEach(crit => {
                    const defaultCrit = customIdealityCriteria.find(c => c.id === crit.id);
                    if (defaultCrit) { crit.score = defaultCrit.defaultScore; crit.weight = defaultCrit.defaultWeight; }
                });
                openIdealityAssessmentModal(contradictionNodeId, solutionId); // 重新開啟模態視窗以更新 UI
                updateIdealityTotalScoreDisplay();
            }

            // 處理保存理想性評估結果
            function handleSaveIdealityAssessment() {
                const contradictionNodeId = domElements.assessingSolutionContradictionNodeIdInput.value;
                const solutionId = domElements.assessingSolutionEntryIdInput.value;
                if (!contradictionNodeId || !solutionId) return;

                const contradictionNode = findNodeById(rcaData, contradictionNodeId);
                if (!contradictionNode || !contradictionNode.solutionsGenerated) return;
                const solution = contradictionNode.solutionsGenerated.find(s => s.id === solutionId);
                if (!solution) return;

                if (!solution.idealityAssessment) solution.idealityAssessment = getDefaultIdealityAssessment();

                // 從 UI 中獲取最新的分數和權重並更新到數據模型
                solution.idealityAssessment.criteria.forEach(crit => {
                    const rangeInput = domElements.idealityCriteriaContainer.querySelector(`#ideality-crit-${crit.id}-range`);
                    const weightInput = domElements.idealityCriteriaContainer.querySelector(`#ideality-crit-${crit.id}-weight`);
                    if (rangeInput) crit.score = parseFloat(rangeInput.value);
                    if (weightInput) crit.weight = parseFloat(weightInput.value);
                });

                solution.idealityAssessment.weightedScore = calculateWeightedScore(solution.idealityAssessment.criteria);
                solution.mcdmScore = solution.idealityAssessment.weightedScore; // 更新解決方案的 MCDM 分數

                pushStateToHistory(rcaData);
                renderSolutionTable(); // 更新解決方案表格
                renderIdeasLandscapeChart(); // 更新創意景觀圖
                closeIdealityAssessmentModal();
            }

            // --- 設定模態視窗與自訂準則管理 ---
            // 開啟設定模態視窗
            function openSettingsModal() {
                if (domElements.settingsModal) {
                    renderCustomCriteriaList(); // 渲染自訂準則列表
                    hideEditCriterionForm(); // 隱藏編輯表單
                    domElements.settingsModal.style.display = 'flex';
                }
            }

            // 關閉設定模態視窗
            function closeSettingsModal() { if (domElements.settingsModal) { domElements.settingsModal.style.display = 'none'; } }

            // 載入或初始化自訂理想性評估準則
            function loadCustomIdealityCriteria() {
                // 始終使用預設準則進行初始化
                customIdealityCriteria = deepCopy(DEFAULT_IDEALITY_CRITERIA);
                
                // 根據預設準則設定初始 criterionIdCounter
                criterionIdCounter = 0;
                customIdealityCriteria.forEach(crit => {
                    const idNum = parseInt(crit.id.replace('crit-', ''));
                    if (!isNaN(idNum) && idNum > criterionIdCounter) { criterionIdCounter = idNum; }
                });
            }

            // 儲存自訂理想性評估準則 (目前僅為控制台輸出)
            function saveCustomIdealityCriteria() { console.log("Custom ideality criteria saved:", customIdealityCriteria); }

            // 渲染自訂評估準則列表
            function renderCustomCriteriaList() {
                domElements.customCriteriaList.innerHTML = '';
                if (customIdealityCriteria.length === 0) {
                    domElements.customCriteriaList.innerHTML = '<p class="text-sm text-gray-500 text-center py-4">目前沒有自訂評估準則。請新增一個。</p>'; return;
                }

                customIdealityCriteria.forEach(crit => {
                    const entryDiv = document.createElement('div');
                    entryDiv.className = 'criterion-entry';
                    entryDiv.innerHTML = `
                        <span>
                            <strong>${crit.name}</strong>
                            <span class="text-gray-500 text-xs ml-2"> (預設分數: ${crit.defaultScore}, 預設權重: ${crit.defaultWeight})</span>
                        </span>
                        <div>
                            <button class="action-button bg-yellow-500 hover:bg-yellow-600 text-xs py-1 px-1.5" onclick="App.showEditCriterionForm('${crit.id}')" title="編輯準則"><i class="fas fa-edit"></i></button>
                            <button class="action-button bg-red-500 hover:bg-red-600 text-xs py-1 px-1.5 ml-1" onclick="App.handleRemoveCriterion('${crit.id}')" title="移除準則"><i class="fas fa-trash"></i></button>
                        </div>
                    `;
                    domElements.customCriteriaList.appendChild(entryDiv);
                });
            }

            /**
             * 顯示或隱藏編輯自訂準則的表單。
             * @param {string|null} criterionId - 要編輯的準則 ID，如果為 null 則為新增。
             */
            function showEditCriterionForm(criterionId) {
                const { editCriterionForm, criterionFormTitle, editingCriterionIdInput, criterionNameInput, criterionDefaultScoreInput, criterionDefaultWeightInput, criterionDescriptionInput } = domElements;

                editingCriterionIdInput.value = criterionId || '';
                if (criterionId) {
                    const criterion = customIdealityCriteria.find(c => c.id === criterionId);
                    if (criterion) {
                        criterionFormTitle.textContent = "編輯評估準則";
                        criterionNameInput.value = criterion.name;
                        criterionDefaultScoreInput.value = criterion.defaultScore;
                        criterionDefaultWeightInput.value = criterion.defaultWeight;
                        criterionDescriptionInput.value = criterion.description;
                    } else { return; }
                } else {
                    criterionFormTitle.textContent = "新增評估準則";
                    criterionNameInput.value = '';
                    criterionDefaultScoreInput.value = 5;
                    criterionDefaultWeightInput.value = 0.25;
                    criterionDescriptionInput.value = '';
                }
                editCriterionForm.style.display = 'block';
                criterionNameInput.focus();
            }

            // 隱藏編輯自訂準則的表單
            function hideEditCriterionForm() {
                if (domElements.editCriterionForm) {
                    domElements.editCriterionForm.style.display = 'none';
                    domElements.editingCriterionIdInput.value = '';
                }
            }

            // 處理保存自訂準則
            function handleSaveCriterion() {
                const { editingCriterionIdInput, criterionNameInput, criterionDefaultScoreInput, criterionDefaultWeightInput, criterionDescriptionInput } = domElements;

                const criterionId = editingCriterionIdInput.value;
                const name = criterionNameInput.value.trim();
                const defaultScore = parseFloat(criterionDefaultScoreInput.value);
                const defaultWeight = parseFloat(criterionDefaultWeightInput.value);
                const description = criterionDescriptionInput.value.trim();

                if (!name) { alert('準則名稱不能為空！'); return; }
                if (isNaN(defaultScore) || defaultScore < 0 || defaultScore > 10) { alert('預設分數必須是 0 到 10 之間的數字！'); return; }
                if (isNaN(defaultWeight) || defaultWeight < 0 || defaultWeight > 1) { alert('預設權重必須是 0 到 1 之間的數字！'); return; }

                if (criterionId) {
                    // 更新現有準則
                    const index = customIdealityCriteria.findIndex(c => c.id === criterionId);
                    if (index > -1) { customIdealityCriteria[index] = { id: criterionId, name, defaultScore, defaultWeight, description }; }
                } else {
                    // 新增準則
                    criterionIdCounter++;
                    customIdealityCriteria.push({ id: `crit-${criterionIdCounter}`, name, defaultScore, defaultWeight, description });
                }

                saveCustomIdealityCriteria();
                renderCustomCriteriaList(); // 重新渲染列表
                hideEditCriterionForm(); // 隱藏表單
                renderSolutionTable(); // 更新解決方案表格（因為評估準則可能已更改）
                renderIdeasLandscapeChart(); // 更新創意景觀圖
                pushStateToHistory(rcaData);
            }

            /**
             * 處理移除自訂準則。
             * @param {string} criterionId - 要移除的準則 ID。
             */
            function handleRemoveCriterion(criterionId) {
                if (customIdealityCriteria.length <= 1) { alert('至少需要一個評估準則！'); return; } // 至少保留一個準則
                if (confirm('確定要移除此評估準則嗎？這將影響所有解決方案的理想性評估。')) {
                    customIdealityCriteria = customIdealityCriteria.filter(c => c.id !== criterionId);
                    saveCustomIdealityCriteria();
                    renderCustomCriteriaList(); // 重新渲染列表
                    renderSolutionTable(); // 更新解決方案表格
                    renderIdeasLandscapeChart(); // 更新創意景觀圖
                    pushStateToHistory(rcaData);
                }
            }

            // --- 匯出圖表功能 ---
            // 將圖表匯出為 PNG 圖片
            async function exportDiagramAsPNG() {
                if (!rcaData || !domElements.scalableContentWrapper || !domElements.diagramContainer || domElements.diagramContainer.children.length === 0) {
                    alert('圖表為空或找不到圖表元素！'); return;
                }
                // 隱藏活動中的輸入組件和文件下拉菜單
                const activeInputGroups = domElements.diagramContainer.querySelectorAll('.input-group');
                activeInputGroups.forEach(group => group.style.display = 'none');
                if (domElements.fileDropdownContent && domElements.fileDropdownContent.style.display === 'block') domElements.fileDropdownContent.style.display = 'none';

                // 儲存原始滾動位置和縮放級別
                const originalRenderAreaScrollX = domElements.diagramRenderArea ? domElements.diagramRenderArea.scrollLeft : 0;
                const originalRenderAreaScrollY = domElements.diagramRenderArea ? domElements.diagramRenderArea.scrollTop : 0;
                const originalZoom = currentZoom;
                const originalAbcCauseFilter = currentAbcCauseFilter;

                // 重置滾動位置，縮放為 1.0，並顯示所有原因節點以進行匯出
                if(domElements.diagramRenderArea) { domElements.diagramRenderArea.scrollLeft = 0; domElements.diagramRenderArea.scrollTop = 0; }
                applyZoom(1.0, true);
                currentAbcCauseFilter = 'all';
                renderRcaDiagram();

                // 確保 SVG 連接線在截圖前重新繪製
                await new Promise(resolve => requestAnimationFrame(() => {
                    drawAllSvgConnectors(domElements.svgLayer, domElements.diagramContainer, domElements.scalableContentWrapper, 1.0);
                    resolve();
                }));

                // 創建一個臨時容器用於匯出
                const exportContainer = document.createElement('div');
                exportContainer.id = 'export-temp-container';
                exportContainer.style.cssText = 'position:absolute;left:-99999px;top:-99999px;background-color:#ffffff;padding:0;margin:0;overflow:hidden;';

                // 設置臨時容器的尺寸以匹配內容
                const contentWidth = domElements.scalableContentWrapper.scrollWidth;
                const contentHeight = domElements.scalableContentWrapper.scrollHeight;
                exportContainer.style.width = contentWidth + 'px';
                exportContainer.style.height = contentHeight + 'px';

                // 克隆可縮放內容，並移除編輯模式的視覺元素
                const clonedScalableContent = domElements.scalableContentWrapper.cloneNode(true);
                clonedScalableContent.style.cssText = 'transform:scale(1.0);margin:0;padding:' + getComputedStyle(domElements.scalableContentWrapper).padding + ';background-color:#ffffff;cursor:default;';

                clonedScalableContent.querySelectorAll('.rca-node-cause').forEach(node => node.classList.remove('dimmed'));
                clonedScalableContent.querySelectorAll('.rca-node-actions').forEach(div => div.style.display = 'none');
                clonedScalableContent.querySelectorAll('.input-group-container').forEach(div => div.style.display = 'none');
                clonedScalableContent.querySelectorAll('.rca-node').forEach(node => node.style.boxShadow = 'none');

                exportContainer.appendChild(clonedScalableContent);
                document.body.appendChild(exportContainer);

                const clonedDiagramContainer = clonedScalableContent.querySelector('#rca-diagram-container');
                const clonedSvgLayer = clonedScalableContent.querySelector('#svg-connector-layer');

                // 確保克隆的 SVG 連接線也重新繪製
                if (clonedDiagramContainer && clonedSvgLayer) {
                     await new Promise(resolve => requestAnimationFrame(() => {
                        drawAllSvgConnectors(clonedSvgLayer, clonedDiagramContainer, clonedScalableContent, 1.0);
                        resolve();
                    }));
                }
                await new Promise(resolve => setTimeout(resolve, 300)); // 給予渲染時間

                try {
                    // 使用 html2canvas 截圖
                    const canvas = await html2canvas(exportContainer, {
                        scale: 1.5, // 提高解析度
                        useCORS: true,
                        backgroundColor: '#ffffff',
                        logging: false
                    });
                    const image = canvas.toDataURL('image/png');
                    const link = document.createElement('a');
                    link.download = '創新問題解決工具-圖表.png';
                    link.href = image;
                    link.click();
                } catch (err) {
                    console.error('匯出圖表失敗:', err);
                    alert('匯出圖表失敗，請檢查控制台錯誤訊息。');
                } finally {
                    // 清理臨時容器並恢復原始狀態
                    document.body.removeChild(exportContainer);
                    activeInputGroups.forEach(group => group.style.display = 'flex');
                    currentAbcCauseFilter = originalAbcCauseFilter;
                    applyZoom(originalZoom, true);
                    renderRcaDiagram();
                    if(domElements.diagramRenderArea) {
                        domElements.diagramRenderArea.scrollLeft = originalRenderAreaScrollX;
                        domElements.diagramRenderArea.scrollTop = originalRenderAreaScrollY;
                    }
                    requestAnimationFrame(() => drawAllSvgConnectors());
                }
            }

            // --- 啟動應用程式 ---
            document.addEventListener('DOMContentLoaded', initialize);

            // 暴露給全域的 API (如果需要從 HTML 的 onclick 等直接呼叫)
            return {
                domElements: domElements, // 暴露 domElements 以便於 HTML 中的 onclick 訪問
                closeTrizSolutionModal: closeTrizSolutionModal,
                closeIdealityAssessmentModal: closeIdealityAssessmentModal,
                closeSettingsModal: closeSettingsModal,
                showEditSolutionEntry: showEditSolutionEntry,
                handleRemoveSolutionEntry: handleRemoveSolutionEntry,
                openIdealityAssessmentModal: openIdealityAssessmentModal,
                showEditCriterionForm: showEditCriterionForm,
                handleRemoveCriterion: handleRemoveCriterion,
                // 其他需要直接從 HTML 呼叫的函數也可以在此處暴露
            };
        })();
    </script>
</body>
</html>
